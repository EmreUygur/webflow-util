{
  "version": 3,
  "sources": ["../src/webflow-detect.ts"],
  "sourcesContent": ["\n//import IPinfoWrapper, { IPinfo, AsnResponse } from \"node-ipinfo\";\n\n\ntype Zone = \"Asia\" | \"Europe\" | \"North America\" | \"South America\" | \"Africa\" | \"Oceania\" | \"Antarctica\";\n\nconst countryToContinent: Record<string, Zone> = {\n    \"CN\": \"Asia\",\n    \"JP\": \"Asia\",\n    \"IN\": \"Asia\",\n    // ... other Asian countries\n\n    \"FR\": \"Europe\",\n    \"DE\": \"Europe\",\n    \"GB\": \"Europe\",\n    // ... other European countries\n\n    \"US\": \"North America\",\n    \"CA\": \"North America\",\n    \"MX\": \"North America\",\n    // ... other North American countries\n\n    \"BR\": \"South America\",\n    \"AR\": \"South America\",\n    // ... other South American countries\n\n    \"ZA\": \"Africa\",\n    \"EG\": \"Africa\",\n    // ... other African countries\n\n    \"AU\": \"Oceania\",\n    \"NZ\": \"Oceania\",\n    // ... other Oceania countries\n\n    \"AQ\": \"Antarctica\"\n    // ... other countries\n};\n\ntype CountryPathMap = Map<string, string>;\n\nconst COOKIE_NAME = 'userInfo'; \n\nexport class Sa5Detect {\n\n//    countries = new Set([\"NZ\", \"AU\", \"US\", \"GB\"]);\n\n    userInfo: any;\n\n    countries: CountryPathMap = new Map([\n    ]);\n\n    constructor() {\n        // const countries: CountryPathMap = new Map([\n        //     [\"NZ\", \"/nz\"],\n        //     [\"AU\", \"/au\"],\n        //     [\"US\", \"/us\"],\n        //     [\"GB\", \"/gb\"]\n        // ]);\n    }\n\n    async getUserInfo() {\n\n        // https://ipinfo.io/developers\n\n        // 37cce46c605631\n        const IP_INFO_TOKEN = '37cce46c605631';\n\n//        const ipinfoWrapper = new IPinfoWrapper(IP_INFO_TOKEN);\n\n        // ipinfoWrapper.lookupIp(null).then((response: IPinfo) => {\n        //     console.log(response);\n        // });\n\n        // ipinfoWrapper.lookupIp(\"1.1.1.1\").then((response: IPinfo) => {\n        //     console.log(response);\n        // });\n        \n        // ipinfoWrapper.lookupASN(\"AS7922\").then((response: AsnResponse) => {\n        //     console.log(response);\n        // });\n\n\n        const request = await fetch(`https://ipinfo.io/json?token=${IP_INFO_TOKEN}`); \n        this.userInfo = await request.json()\n        \n        console.log(\n            this.userInfo.ip, \n            this.userInfo.country\n            ); \n\n\n    }\n    \n    loadOrGetUserInfo() {\n        this.loadUserInfo();\n\n        if(!this.userInfo) {\n            this.getUserInfo();\n            this.saveUserInfo(); \n        }\n\n    }\n\n    saveUserInfo() {\n        const expiryDate = new Date();\n        expiryDate.setMonth(expiryDate.getMonth() + 1); // Set the expiry date to 1 month from now\n\n        const serializedUserInfo = JSON.stringify(this.userInfo);\n        document.cookie = `userInfo=${encodeURIComponent(serializedUserInfo)};expires=${expiryDate.toUTCString()};path=/`;\n    }\n\n    loadUserInfo() {\n        const allCookies = document.cookie.split('; ');\n        for (const cookie of allCookies) {\n            const [name, value] = cookie.split('=');\n            if (name === 'userInfo') {\n                this.userInfo = JSON.parse(decodeURIComponent(value));\n                return this.userInfo;\n            }\n        }\n        return null;\n    }\n\n    detectGeographicZone() {\n\n        /*\n    const continent = countryToContinent[jsonResponse.country];\n    console.log(`The country ${jsonResponse.country} is in ${continent}.`);\n\n\n    // Usage\n    const currentCountry = jsonResponse.country;\n    if (isCountryInList(currentCountry)) {\n        console.log(`${currentCountry} is in the list.`);\n    } else {\n        console.log(`${currentCountry} is not in the list.`);\n    }\n    */\n    }\n\n    \n    // Function to check if a country is in the list\n    isCountryInList(countryCode: string): boolean {\n        return this.countries.has(countryCode);\n    } \n\n    getPathForCountry(countryCode: string): string | undefined {\n\n        return this.countries.get(countryCode);\n    }\n\n\n    handleRedirect() {\n\n    }\n\n    // Home should be \n\n    applyDetectContext() {\n\n        let path = this.getPathForCountry(this.userInfo.country);\n\n        // Redirect  \n        if(path) {\n            if (window.location.pathname != path)\n                window.location.pathname = path;\n        }\n\n        // Apply hide/show filter on elements \n\n        // Allow override context change on country\n\n    }\n\n}"],
  "mappings": ";;AA0CO,MAAM,YAAN,MAAgB;AAAA,IASnB,cAAc;AAHd,uBAA4B,oBAAI,IAAI,CACpC,CAAC;AAAA,IASD;AAAA,IAEA,MAAM,cAAc;AAKhB,YAAM,gBAAgB;AAiBtB,YAAM,UAAU,MAAM,MAAM,gCAAgC,eAAe;AAC3E,WAAK,WAAW,MAAM,QAAQ,KAAK;AAEnC,cAAQ;AAAA,QACJ,KAAK,SAAS;AAAA,QACd,KAAK,SAAS;AAAA,MACd;AAAA,IAGR;AAAA,IAEA,oBAAoB;AAChB,WAAK,aAAa;AAElB,UAAG,CAAC,KAAK,UAAU;AACf,aAAK,YAAY;AACjB,aAAK,aAAa;AAAA,MACtB;AAAA,IAEJ;AAAA,IAEA,eAAe;AACX,YAAM,aAAa,IAAI,KAAK;AAC5B,iBAAW,SAAS,WAAW,SAAS,IAAI,CAAC;AAE7C,YAAM,qBAAqB,KAAK,UAAU,KAAK,QAAQ;AACvD,eAAS,SAAS,YAAY,mBAAmB,kBAAkB,aAAa,WAAW,YAAY;AAAA,IAC3G;AAAA,IAEA,eAAe;AACX,YAAM,aAAa,SAAS,OAAO,MAAM,IAAI;AAC7C,iBAAW,UAAU,YAAY;AAC7B,cAAM,CAAC,MAAM,KAAK,IAAI,OAAO,MAAM,GAAG;AACtC,YAAI,SAAS,YAAY;AACrB,eAAK,WAAW,KAAK,MAAM,mBAAmB,KAAK,CAAC;AACpD,iBAAO,KAAK;AAAA,QAChB;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,IAEA,uBAAuB;AAAA,IAevB;AAAA,IAIA,gBAAgB,aAA8B;AAC1C,aAAO,KAAK,UAAU,IAAI,WAAW;AAAA,IACzC;AAAA,IAEA,kBAAkB,aAAyC;AAEvD,aAAO,KAAK,UAAU,IAAI,WAAW;AAAA,IACzC;AAAA,IAGA,iBAAiB;AAAA,IAEjB;AAAA,IAIA,qBAAqB;AAEjB,UAAI,OAAO,KAAK,kBAAkB,KAAK,SAAS,OAAO;AAGvD,UAAG,MAAM;AACL,YAAI,OAAO,SAAS,YAAY;AAC5B,iBAAO,SAAS,WAAW;AAAA,MACnC;AAAA,IAMJ;AAAA,EAEJ;",
  "names": []
}
