{
  "version": 3,
  "sources": ["../../src/webflow-form/form-data-binder.ts"],
  "sourcesContent": ["\r\n/*\r\n * form-data-binder\r\n * \r\n * Sygnal Technology Group\r\n * http://sygnal.com\r\n * \r\n * For capturing sender IP info,\r\n * and appending to a form.\r\n */\r\n\r\nimport { Sa5Form } from \"../webflow-form\";\r\n// import { getDataSource } from './webflow-data-collectionlist.js';\r\n\r\nexport class Sa5FormDataBinder {\r\n\r\n    config; // Optional config\r\n\r\n    handler;\r\n\r\n    form: Sa5Form;\r\n//    prefix = \"ip\";\r\n\r\n    constructor(form: Sa5Form, config) {\r\n        \r\n        this.form = form;\r\n        \r\n        this.handler = this;\r\n\r\n        this.config = config;\r\n\r\n    }\r\n/* \r\n    // Creates an HTML <DATALIST> for binding.\r\n    // Data source assumes array of objects, with a per-item value of 'name'\r\n    createHtmlDataList(dataSourceName, data) {\r\n\r\n        var datalist = document.createElement('datalist');\r\n        datalist.setAttribute(\"id\", dataSourceName);\r\n\r\n    //    console.log(elemType);\r\n\r\n        console.log(`creating dataList '${dataSourceName}'`);\r\n        console.log(data);\r\n\r\n    //    console.log(JSON.stringify(data, 2));\r\n\r\n        $.each(data, function (key, entry) {\r\n            console.log(`iterate`);\r\n\r\n            // create new option element\r\n            var opt = document.createElement('option');\r\n\r\n            // create text node to add to option element (opt)\r\n            console.log(entry.text);\r\n\r\n            // HTML Decode JSON for Select Option element\r\n            var decodedText = $(\"<textarea/>\").html(entry.text).val();\r\n            //                console.log(decodedText);\r\n\r\n            opt.setAttribute(\"value\", decodedText);\r\n\r\n            //                opt.appendChild(document.createTextNode(decodedText));\r\n\r\n            // set value property of opt\r\n            //                opt.value = entry.id;\r\n\r\n            // add opt to end of select box (sel)\r\n            datalist.appendChild(opt);\r\n\r\n        });\r\n\r\n        console.log(datalist);\r\n\r\n        document.body.appendChild(datalist);\r\n\r\n    }\r\n\r\n    // Creates a more unique version of a DataSource name (DSN)\r\n    // to ensure it won't conflict with element IDs\r\n    createDsnMoniker(dsn) {\r\n        return `wfu-dsn__${dsn}`;\r\n    }\r\n\r\n    // Bind all INPUTS with [wfu-bind] specified\r\n    dataBindAllFormInputs(db) {\r\n\r\n        // Find all INPUTS with [wfu-bind] specified\r\n        var dataBoundElements = $('input[wfu-bind]');\r\n\r\n        // Iterate and bind each individually\r\n        $.each(dataBoundElements, function (i, elem) {\r\n            dataBindFormInput(elem, db);\r\n        })\r\n\r\n    }\r\n\r\n    // Bind all SELECTS with [wfu-bind] specified\r\n    dataBindAllFormSelects(db) {\r\n\r\n        // Find all SELECTS with [wfu-bind] specified\r\n        var dataBoundElements = $('select[wfu-bind]');\r\n\r\n        // Iterate and bind each individually\r\n        $.each(dataBoundElements, function (i, elem) {\r\n            dataBindFormSelect(elem, db);\r\n        })\r\n\r\n    }\r\n\r\n    // Note, db not really needed for INPUT binding,\r\n    // since they are bound to the DATALIST elements already created.\r\n    // However kept in the call for pattern consistency\r\n    dataBindFormInput(elem, db) {\r\n\r\n        // Validate element type\r\n        if (!(elem instanceof HTMLInputElement)) {\r\n            console.error(`Attempted to INPUT databind a non-INPUT element.`);\r\n            return;\r\n        }\r\n\r\n        // Get the data-source name\r\n        var dataSourceName = elem.getAttribute('wfu-bind');\r\n        console.log(`wfu-bind = ${dataSourceName}`);\r\n\r\n        // Handle missing source specification\r\n        if (!dataSourceName) {\r\n            console.warn('dataBound element found with no datasource specified.');\r\n            return;\r\n        }\r\n\r\n        // Add HTML attribute that connects the INPUT\r\n        // to the DATALIST\r\n        elem.setAttribute(\r\n            \"list\",\r\n            createDsnMoniker(dataSourceName)\r\n        );\r\n\r\n    }\r\n\r\n    dataBindFormSelect(elem, db) {\r\n\r\n        // Validate element type\r\n        if (!(elem instanceof HTMLSelectElement)) {\r\n            console.error(`Attempted to SELECT databind a non-SELECT element.`);\r\n            return;\r\n        }\r\n\r\n        // Get the data-source name\r\n        var dataSourceName = elem.getAttribute('wfu-bind');\r\n\r\n        // Handle missing source specification\r\n        if (!dataSourceName) {\r\n            console.warn('dataBound element found with no datasource specified.');\r\n            return;\r\n        }\r\n\r\n        // Do data binding\r\n        $.each((db.data.get(dataSourceName)), function (key, entry) {\r\n\r\n            // create new option element\r\n            var opt = document.createElement('option');\r\n\r\n            // create text node to add to option element (opt)\r\n            // HTML Decode JSON for Select Option element\r\n            var decodedText = $(\"<textarea/>\").html(entry.text).val(); // HTML Decode text\r\n            opt.appendChild(document.createTextNode(decodedText));\r\n\r\n            // set value property of opt\r\n            opt.value = entry.id;\r\n\r\n            // add opt to end of select box (sel)\r\n            elem.appendChild(opt);\r\n\r\n        });\r\n\r\n    }\r\n\r\n\r\n    appendIPInfo() {\r\n\r\n        const handler = this.handler;\r\n        const form = this.form;\r\n\r\n        console.debug(\"WFU append IP Info to form.\");\r\n\r\n        // Get GeoIP info\r\n        // and append in hidden fields \r\n        $.getJSON(\r\n            \"https://get.geojs.io/v1/ip/geo.json\",\r\n            function (data) {\r\n\r\n            $('<input>').attr({\r\n                type: 'hidden',\r\n                name: `${handler.prefix}-address`,\r\n                value: data.ip\r\n            }).appendTo(form);\r\n\r\n            $('<input>').attr({\r\n                type: 'hidden',\r\n                name: `${handler.prefix}-country`,\r\n                value: data.country\r\n            }).appendTo(form);\r\n\r\n            $('<input>').attr({\r\n                type: 'hidden',\r\n                name: `${handler.prefix}-country-code`,\r\n                value: data.country_code\r\n            }).appendTo(form);\r\n\r\n            $('<input>').attr({\r\n                type: 'hidden',\r\n                name: `${handler.prefix}-region`,\r\n                value: data.region\r\n            }).appendTo(form);\r\n\r\n            $('<input>').attr({\r\n                type: 'hidden',\r\n                name: `${handler.prefix}-city`,\r\n                value: data.city\r\n            }).appendTo(form);\r\n\r\n            $('<input>').attr({\r\n                type: 'hidden',\r\n                name: `${handler.prefix}-timezone`,\r\n                value: data.timezone\r\n            }).appendTo(form);\r\n\r\n            $('<input>').attr({\r\n                type: 'hidden',\r\n                name: `${handler.prefix}-latitude`,\r\n                value: data.latitude\r\n            }).appendTo(form);\r\n\r\n            $('<input>').attr({\r\n                type: 'hidden',\r\n                name: `${handler.prefix}-longitude`,\r\n                value: data.longitude\r\n            }).appendTo(form);\r\n\r\n        });\r\n\r\n    }\r\n*/\r\n}\r\n"],
  "mappings": ";;AAcO,MAAM,oBAAN,MAAwB;AAAA,IAS3B,YAAY,MAAe,QAAQ;AAE/B,WAAK,OAAO;AAEZ,WAAK,UAAU;AAEf,WAAK,SAAS;AAAA,IAElB;AAAA,EAqNJ;",
  "names": []
}
