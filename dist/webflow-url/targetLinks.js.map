{
  "version": 3,
  "sources": ["../../src/webflow-url/targetLinks.ts"],
  "sourcesContent": ["\r\n/*\r\n * target links\r\n * Fixues up //self/ relative links for CMS.\r\n * \r\n * Sygnal Technology Group\r\n * http://sygnal.com\r\n * \r\n * Url Utilities\r\n */\r\n\r\nimport { Sa5Core } from '../webflow-core'\r\n\r\n\r\nexport interface TargetExternalConfig {\r\n\r\n    allLinks: boolean; // Indicates all links should be targeted, or attribute region only\r\n\r\n}\r\n\r\n/*\r\n * Link-processing functions.\r\n * Fixues up //self/ relative links for CMS.\r\n */\r\n\r\nexport class WfuTargetLinks {\r\n\r\n    //    config; // Optional config\r\n    private _element: HTMLElement;\r\n    \r\n        // TODO: Allow forcing target override \r\n    \r\n        constructor(element: HTMLElement) { \r\n            \r\n    //        this.config = config;\r\n            this._element = element;\r\n\r\n        }\r\n    \r\n        // Process elements with the custom attr wfu-query-param\r\n        init() {\r\n    \r\n            // Get all 'a' elements with 'href' attribute starting with 'http://' or 'https://' and without 'target' attribute\r\n            let elements = Array.from(\r\n                document.querySelectorAll(\"a[href^='http://']:not([target]), a[href^='https://']:not([target])\"));\r\n    \r\n            elements.forEach((element) => {\r\n                // Get the href attribute\r\n                let href = element.getAttribute('href');\r\n    \r\n                if (href) {\r\n                    console.debug(`retargeting ${href}.`);\r\n    \r\n                    // Set the target attribute to '_blank'\r\n                    element.setAttribute('target', '_blank');\r\n                }\r\n            });\r\n    \r\n        }\r\n    \r\n    }\r\n    "],
  "mappings": ";;AAyBO,MAAM,iBAAN,MAAqB;AAAA,IAOpB,YAAY,SAAsB;AAG9B,WAAK,WAAW;AAAA,IAEpB;AAAA,IAGA,OAAO;AAGH,UAAI,WAAW,MAAM;AAAA,QACjB,SAAS,iBAAiB,qEAAqE;AAAA,MAAC;AAEpG,eAAS,QAAQ,CAAC,YAAY;AAE1B,YAAI,OAAO,QAAQ,aAAa,MAAM;AAEtC,YAAI,MAAM;AACN,kBAAQ,MAAM,eAAe,OAAO;AAGpC,kBAAQ,aAAa,UAAU,QAAQ;AAAA,QAC3C;AAAA,MACJ,CAAC;AAAA,IAEL;AAAA,EAEJ;",
  "names": []
}
