{
  "version": 3,
  "sources": ["../../src/webflow-core/webflow-editor.ts"],
  "sourcesContent": ["\r\n/*\r\n * webflow-core\r\n * \r\n * Sygnal Technology Group\r\n * http://sygnal.com\r\n * \r\n * Editor Utilities\r\n */\r\n\r\n\r\n\r\n\r\n/*\r\n * Sa5Editor\r\n *\r\n * Sygnal Technology Group\r\n * http://sygnal.com\r\n *\r\n * Detects the current editor mode.\r\n */\r\n\r\nexport class Sa5Editor {\r\n\r\n    config; // Optional config\r\n\r\n    get isEditorMode() {\r\n\r\n// TODO: check\r\n// Title\r\n// vs webflow.require(\"editor\")\r\n// vs [data-wf-mode]  \r\n\r\n        return document.documentElement\r\n            .getAttribute(\"data-wf-mode\") === \"editor\";\r\n\r\n//        return $(\"html\").attr(\"data-wf-mode\") == \"editor\";\r\n\r\n    }\r\n\r\n    detectEditorMode() {\r\n\r\n        // HACK: Use the <title> to detect Editor mode status\r\n        if (document.title.startsWith(\"Editor:\")) {\r\n            console.debug(\"Editor mode\");\r\n            document.documentElement.setAttribute(\"data-wf-mode\", \"editor\");\r\n        } else {\r\n            console.debug(\"NOT Editor mode\");\r\n            document.documentElement.removeAttribute(\"data-wf-mode\");\r\n        }\r\n\r\n        // // HACK: Use the <title> to detect Editor mode status\r\n        // if ($(\"title\").text().startsWith(\"Editor:\")) {\r\n        //     console.debug(\"Editor mode\");\r\n        //     $(\"html\").attr(\"data-wf-mode\", \"editor\");\r\n        // } else {\r\n        //     console.debug(\"NOT Editor mode\");\r\n        //     $(\"html\").removeAttr(\"data-wf-mode\");\r\n        // }\r\n\r\n    }\r\n\r\n    constructor(config = null) {\r\n        config = config || {};\r\n\r\n        this.config = config;\r\n\r\n        this.init();\r\n\r\n//        console.debug(`WFU Edit mode monitor installed`);\r\n\r\n    }\r\n\r\n    // Install Editor mode detector\r\n    init() {\r\n\r\n        // Assuming `this` is of a class type that has a `detectEditorMode` method\r\n        let titleElement = document.getElementsByTagName(\"title\")[0];\r\n\r\n        // Create a new MutationObserver instance\r\n        let observer = new MutationObserver((mutations) => {\r\n            this.detectEditorMode();\r\n        });\r\n\r\n        // Start observing the target node for configured mutations\r\n        observer.observe(titleElement, { childList: true });\r\n\r\n        // var _this = this;\r\n        // this.observeDOM($(\"title\")[0], function (m) {\r\n\r\n        //     _this.detectEditorMode();\r\n        // });\r\n    }\r\n\r\n    // Installs a mutation observer \r\n\r\n//    type Callback = (mutationsList: MutationRecord[], observer: MutationObserver) => void;\r\n\r\n//observeDOM\r\n// mutations() {\r\n\r\n//     const MutationObserver = window.MutationObserver || window['WebKitMutationObserver'];\r\n\r\n//     return function (obj: Node, callback: Callback): MutationObserver | undefined {\r\n//         if (!obj || obj.nodeType !== Node.ELEMENT_NODE) return;\r\n\r\n//         if (MutationObserver) {\r\n//             // define a new observer\r\n//             const mutationObserver = new MutationObserver(callback);\r\n\r\n//             // have the observer observe foo for changes in children\r\n//             mutationObserver.observe(obj, { childList: true, subtree: true });\r\n//             return mutationObserver;\r\n//         }\r\n\r\n//         // browser support fallback\r\n//         else if (window.addEventListener) {\r\n//             obj.addEventListener('DOMNodeInserted', callback as EventListener, false);\r\n//             obj.addEventListener('DOMNodeRemoved', callback as EventListener, false);\r\n//         }\r\n//     };\r\n// }\r\n\r\n/*\r\n\r\n    observeDOM = (function () {\r\n    var MutationObserver = window.MutationObserver || window.WebKitMutationObserver;\r\n\r\n    return function (obj, callback) {\r\n        if (!obj || obj.nodeType !== 1) return;\r\n\r\n        if (MutationObserver) {\r\n            // define a new observer\r\n            var mutationObserver = new MutationObserver(callback)\r\n\r\n            // have the observer observe foo for changes in children\r\n            mutationObserver.observe(obj, { childList: true, subtree: true })\r\n            return mutationObserver\r\n        }\r\n\r\n        // browser support fallback\r\n        else if (window.addEventListener) {\r\n            obj.addEventListener('DOMNodeInserted', callback, false)\r\n            obj.addEventListener('DOMNodeRemoved', callback, false)\r\n        }\r\n    }\r\n    })();\r\n\r\n*/\r\n\r\n}\r\n\r\n\r\n\r\n"],
  "mappings": ";;AAsBO,MAAM,YAAN,MAAgB;AAAA,IAInB,IAAI,eAAe;AAOf,aAAO,SAAS,gBACX,aAAa,cAAc,MAAM;AAAA,IAI1C;AAAA,IAEA,mBAAmB;AAGf,UAAI,SAAS,MAAM,WAAW,SAAS,GAAG;AACtC,gBAAQ,MAAM,aAAa;AAC3B,iBAAS,gBAAgB,aAAa,gBAAgB,QAAQ;AAAA,MAClE,OAAO;AACH,gBAAQ,MAAM,iBAAiB;AAC/B,iBAAS,gBAAgB,gBAAgB,cAAc;AAAA,MAC3D;AAAA,IAWJ;AAAA,IAEA,YAAY,SAAS,MAAM;AACvB,eAAS,UAAU,CAAC;AAEpB,WAAK,SAAS;AAEd,WAAK,KAAK;AAAA,IAId;AAAA,IAGA,OAAO;AAGH,UAAI,eAAe,SAAS,qBAAqB,OAAO,EAAE;AAG1D,UAAI,WAAW,IAAI,iBAAiB,CAAC,cAAc;AAC/C,aAAK,iBAAiB;AAAA,MAC1B,CAAC;AAGD,eAAS,QAAQ,cAAc,EAAE,WAAW,KAAK,CAAC;AAAA,IAOtD;AAAA,EA0DJ;",
  "names": []
}
