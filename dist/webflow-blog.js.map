{
  "version": 3,
  "sources": ["../src/webflow-core/debug.ts", "../src/webflow-blog/github-gist.ts", "../src/webflow-blog.ts"],
  "sourcesContent": ["\n/*\n * webflow-core\n * \n * Sygnal Technology Group\n * http://sygnal.com\n * \n * Debug Utilities\n */\n\n\n\nexport class Sa5Debug {\n    \n    private localStorageDebugFlag: string = 'sa5-debug';\n\n    private _enabled: boolean = false;\n    private _label: string;\n\n    // Get or set WFU persistent debug state\n    // which is stored in localStorage. \n    get persistentDebug(): boolean {\n        return Boolean(localStorage.getItem(this.localStorageDebugFlag)); \n    }\n    set persistentDebug(active: boolean) {\n        if (active) {\n            localStorage.setItem(this.localStorageDebugFlag, \"true\");\n            console.debug (\"sa5-core debug enabled (persistent).\");\n        } else {\n            localStorage.removeItem(this.localStorageDebugFlag); \n            console.debug (\"sa5-core debug disabled (persistent).\");\n        }\n    }\n\n    // Enable/disable debugging \n    get enabled(): boolean {\n\n        // localStorage is checked for a debug flag, to enable remote debug enabling \n        // Any non-null string value will resolve to TRUE here, including the string \"false\" \n        var wfuDebugValue = Boolean(localStorage.getItem(this.localStorageDebugFlag)); \n\n        // Or this with the current debug state\n        // If either is enabled, debugging is on \n        wfuDebugValue = wfuDebugValue || this._enabled; \n\n        return wfuDebugValue;\n    }\n    set enabled(active: boolean) {\n        this._enabled = active;\n    }\n\n\n    // Initialize\n    constructor(label: string) {\n\n        // Save the label, for console logging\n        this._label = label;\n\n    }\n\n\n    // Start a console log group\n    group(name) {\n        if (this.enabled)\n            console.group(name);\n    }\n\n    // End a console log group\n    groupEnd() {\n        if (this.enabled)\n            console.groupEnd();\n    }\n\n    // Log debug data to the console\n    debug(...args: any[]): void {\n\n        if (this.enabled)\n            // Unlimited arguments in a JavaScript function\n            // https://stackoverflow.com/a/6396066\n            console.debug(this._label, ...args); \n            \n    }\n\n}\n\n\n", "\n/*\n * webflow-blog\n * \n * Sygnal Technology Group\n * http://sygnal.com\n * \n * Blog Utilities\n */\n\n\n\n/*\n * GitHub Gist.\n */\n\nexport class GitHubGist {\n    \n    urlTemplate;\n\n    // Initialize\n    constructor() {\n    }\n\n    init() {\n        this.initCopyGist();\n    }\n        \n    initCopyGist() {\n\n        document.querySelectorAll('[wfu-gist-copy]').forEach((el: HTMLElement) => {\n            el.addEventListener('click', (e: Event) => {\n                \n//                console.log(\"clicked\"); \n                \n                let a: string | null = el.getAttribute('wfu-gist-copy');\n//                console.log(a); \n                \n                let gist: Element | null = document.querySelector(`[wfu-gist=\"${a}\"]`);\n                \n                if (gist !== null) {\n                    this.copyToClipboard(this.getGistCode(gist));\n                }\n                \n            });\n        });\n\n    }\n\n    copyToClipboard(text: string) {\n\n        navigator.clipboard.writeText(text).then(() => {\n//            console.log('Copying to clipboard was successful!');\n        }, (err: any) => {\n            console.error('Could not copy text: ', err);\n        });\n\n    }\n\n    getGistCode(el: Element | null): string {\n    \n        if(!el) return;\n        \n        // Extract the GIST content\n        let code = el.querySelector(\".gist-file\")?.textContent || '';\n        \n        // Remove whitespace-only lines\n        let cleanString = code.replace(/\\n\\s*\\n/g, '\\n');\n        \n//        console.log(cleanString);\n  \n        // Trim the last four lines \n        let lines = cleanString.split('\\n');\n        lines = lines.slice(0, -4);  \n        let finalString = lines.join('\\n');\n    \n//        console.log(finalString);\n        \n        // Trim 10 pre-whitespaces\n        let finalLines = finalString.split('\\n').map((line: string) => {\n            return line.startsWith('          ') ? line.slice(10) : line;\n        });\n        let trimmedString = finalLines.join('\\n');\n    \n//        console.log(trimmedString);\n\n        return trimmedString;\n    }\n    \n}\n\nwindow[\"GitHubGist\"] = GitHubGist;\n\n\n\n\n// // Register\n// window[\"sa5\"] = window[\"sa5\"] || {};\n// window[\"sa5\"][\"Sa5Blog\"] = Sa5Blog;", "\n/*\n * webflow-blog\n * \n * Sygnal Technology Group\n * http://sygnal.com\n * \n * Blog Utilities\n */\n\n\nimport { Sa5Debug } from './webflow-core/debug';\n\nimport { GitHubGist } from './webflow-blog/github-gist'\n\n/*\n * GitHub Gist.\n */\n\nexport class Sa5Blog {\n    \n    urlTemplate;\n    debug: Sa5Debug; \n \n    // Initialize\n    constructor() {\n\n        // Enable debugging, if specified\n        this.debug = new Sa5Debug(\"sa5-blog\");\n//        this.debug.enabled = this.config.debug; \n\n    }\n\n    init() {\n\nthis.debug.debug(\"Initializing SA5 Blog\")\n\n        var gitHubGist: GitHubGist = new GitHubGist();\n        gitHubGist.initCopyGist();\n\n    }\n        \n//     initCopyGist() {\n\n//         document.querySelectorAll('[wfu-gist-copy]').forEach((el: HTMLElement) => {\n//             el.addEventListener('click', (e: Event) => {\n                \n// //                console.log(\"clicked\"); \n                \n//                 let a: string | null = el.getAttribute('wfu-gist-copy');\n// //                console.log(a); \n                \n//                 let gist: Element | null = document.querySelector(`[wfu-gist=\"${a}\"]`);\n                \n//                 if (gist !== null) {\n//                     this.copyToClipboard(this.getGistCode(gist));\n//                 }\n                \n//             });\n//         });\n\n//     }\n\n//     copyToClipboard(text: string) {\n\n//         navigator.clipboard.writeText(text).then(() => {\n// //            console.log('Copying to clipboard was successful!');\n//         }, (err: any) => {\n//             console.error('Could not copy text: ', err);\n//         });\n\n//     }\n\n//     getGistCode(el: Element | null): string {\n    \n//         if(!el) return;\n        \n//         // Extract the GIST content\n//         let code = el.querySelector(\".gist-file\")?.textContent || '';\n        \n//         // Remove whitespace-only lines\n//         let cleanString = code.replace(/\\n\\s*\\n/g, '\\n');\n        \n// //        console.log(cleanString);\n  \n//         // Trim the last four lines \n//         let lines = cleanString.split('\\n');\n//         lines = lines.slice(0, -4);  \n//         let finalString = lines.join('\\n');\n    \n// //        console.log(finalString);\n        \n//         // Trim 10 pre-whitespaces\n//         let finalLines = finalString.split('\\n').map((line: string) => {\n//             return line.startsWith('          ') ? line.slice(10) : line;\n//         });\n//         let trimmedString = finalLines.join('\\n');\n    \n// //        console.log(trimmedString);\n\n//         return trimmedString;\n//     }\n    \n}\n\n//window[\"GitHubGist\"] = GitHubGist;\n\n\n\n\n// Register\nwindow[\"sa5\"] = window[\"sa5\"] || {};\nwindow[\"sa5\"][\"Sa5Blog\"] = Sa5Blog;"],
  "mappings": ";;AAYO,MAAM,WAAN,MAAe;AAAA,IAyClB,YAAY,OAAe;AAvC3B,WAAQ,wBAAgC;AAExC,WAAQ,WAAoB;AAwCxB,WAAK,SAAS;AAAA,IAElB;AAAA,IArCA,IAAI,kBAA2B;AAC3B,aAAO,QAAQ,aAAa,QAAQ,KAAK,qBAAqB,CAAC;AAAA,IACnE;AAAA,IACA,IAAI,gBAAgB,QAAiB;AACjC,UAAI,QAAQ;AACR,qBAAa,QAAQ,KAAK,uBAAuB,MAAM;AACvD,gBAAQ,MAAO,sCAAsC;AAAA,MACzD,OAAO;AACH,qBAAa,WAAW,KAAK,qBAAqB;AAClD,gBAAQ,MAAO,uCAAuC;AAAA,MAC1D;AAAA,IACJ;AAAA,IAGA,IAAI,UAAmB;AAInB,UAAI,gBAAgB,QAAQ,aAAa,QAAQ,KAAK,qBAAqB,CAAC;AAI5E,sBAAgB,iBAAiB,KAAK;AAEtC,aAAO;AAAA,IACX;AAAA,IACA,IAAI,QAAQ,QAAiB;AACzB,WAAK,WAAW;AAAA,IACpB;AAAA,IAaA,MAAM,MAAM;AACR,UAAI,KAAK;AACL,gBAAQ,MAAM,IAAI;AAAA,IAC1B;AAAA,IAGA,WAAW;AACP,UAAI,KAAK;AACL,gBAAQ,SAAS;AAAA,IACzB;AAAA,IAGA,SAAS,MAAmB;AAExB,UAAI,KAAK;AAGL,gBAAQ,MAAM,KAAK,QAAQ,GAAG,IAAI;AAAA,IAE1C;AAAA,EAEJ;;;ACnEO,MAAM,aAAN,MAAiB;AAAA,IAKpB,cAAc;AAAA,IACd;AAAA,IAEA,OAAO;AACH,WAAK,aAAa;AAAA,IACtB;AAAA,IAEA,eAAe;AAEX,eAAS,iBAAiB,iBAAiB,EAAE,QAAQ,CAAC,OAAoB;AACtE,WAAG,iBAAiB,SAAS,CAAC,MAAa;AAIvC,cAAI,IAAmB,GAAG,aAAa,eAAe;AAGtD,cAAI,OAAuB,SAAS,cAAc,cAAc,KAAK;AAErE,cAAI,SAAS,MAAM;AACf,iBAAK,gBAAgB,KAAK,YAAY,IAAI,CAAC;AAAA,UAC/C;AAAA,QAEJ,CAAC;AAAA,MACL,CAAC;AAAA,IAEL;AAAA,IAEA,gBAAgB,MAAc;AAE1B,gBAAU,UAAU,UAAU,IAAI,EAAE,KAAK,MAAM;AAAA,MAE/C,GAAG,CAAC,QAAa;AACb,gBAAQ,MAAM,yBAAyB,GAAG;AAAA,MAC9C,CAAC;AAAA,IAEL;AAAA,IAEA,YAAY,IAA4B;AA3D5C;AA6DQ,UAAG,CAAC;AAAI;AAGR,UAAI,SAAO,QAAG,cAAc,YAAY,MAA7B,mBAAgC,gBAAe;AAG1D,UAAI,cAAc,KAAK,QAAQ,YAAY,IAAI;AAK/C,UAAI,QAAQ,YAAY,MAAM,IAAI;AAClC,cAAQ,MAAM,MAAM,GAAG,EAAE;AACzB,UAAI,cAAc,MAAM,KAAK,IAAI;AAKjC,UAAI,aAAa,YAAY,MAAM,IAAI,EAAE,IAAI,CAAC,SAAiB;AAC3D,eAAO,KAAK,WAAW,YAAY,IAAI,KAAK,MAAM,EAAE,IAAI;AAAA,MAC5D,CAAC;AACD,UAAI,gBAAgB,WAAW,KAAK,IAAI;AAIxC,aAAO;AAAA,IACX;AAAA,EAEJ;AAEA,SAAO,gBAAgB;;;ACxEhB,MAAM,UAAN,MAAc;AAAA,IAMjB,cAAc;AAGV,WAAK,QAAQ,IAAI,SAAS,UAAU;AAAA,IAGxC;AAAA,IAEA,OAAO;AAEX,WAAK,MAAM,MAAM,uBAAuB;AAEhC,UAAI,aAAyB,IAAI,WAAW;AAC5C,iBAAW,aAAa;AAAA,IAE5B;AAAA,EA+DJ;AAQA,SAAO,SAAS,OAAO,UAAU,CAAC;AAClC,SAAO,OAAO,aAAa;",
  "names": []
}
