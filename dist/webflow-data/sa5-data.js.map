{
  "version": 3,
  "sources": ["../../src/webflow-data/sa5-data.ts"],
  "sourcesContent": ["\n/*\n * SA5\n * Sygnal Technology Group\n * sa5-data\n * \n * Creates a data source from SA5 data.\n */\n\n// import { Database } from '../modules/webflow-data.js';\n\nimport { Sa5ScriptType } from '../globals'\n\ntype SA5Object = { [key: string]: any };\n\nexport class Sa5Data {\n\n    elem: HTMLElement;\n    type: string;\n    value: SA5Object;\n\n    constructor(elem: HTMLElement) {\n\n        this.elem = elem; \n        this.init();\n\n    }\n\n    init() {\n\n        // Verify node type\n        if (this.elem.nodeName != \"SCRIPT\") {\n            console.error(\"Invalid element for Sa5Data. Must be a SCRIPT element.\", this.elem);\n            return;\n        }\n        \n        // Verify type\n        this.type = this.elem.getAttribute(\"type\");\n        if (this.type != Sa5ScriptType.SCRIPT_TYPE_SA5_DATA_ITEM) {\n            console.error(\"Invalid element type for Sa5Data.\", this.elem);\n            return; \n        }\n\n        let data = this.elem.innerText;\n\n        this.value = this.parse(data); \n\n    }\n\n    parse(content: string): SA5Object | null {\n        const obj: SA5Object = {};\n        const lines = content.split('\\n');\n        let currentKey: string | null = null;\n        let currentValue: string | null = null;\n        let currentType: 'string' | 'number' | 'boolean' = 'string';\n        let isMultiLineValue = false;\n    \n        for (let line of lines) {\n            line = line.trim();\n            \n            // Skip empty lines\n            if (!line) continue;\n    \n            // Handle multi-line values\n            if (isMultiLineValue) {\n                if (line.endsWith('>')) {\n                    currentValue += '\\n' + line.slice(0, -1); // Exclude the closing '>'\n                    if (currentKey !== null && currentValue !== null) {\n                        switch (currentType) {\n                            case 'number':\n                                obj[currentKey] = parseFloat(currentValue);\n                                break;\n                            case 'boolean':\n                                obj[currentKey] = currentValue.toLowerCase() === 'true';\n                                break;\n                            default:\n                                obj[currentKey] = currentValue;\n                                break;\n                        }\n                    }\n                    isMultiLineValue = false;\n                    currentValue = null;\n                    currentKey = null;\n                    currentType = 'string';\n                } else {\n                    currentValue += '\\n' + line;\n                }\n                continue;\n            }\n    \n            const delimiterMatch = line.match(/:(\\$|#|\\?|)/);\n            if (!delimiterMatch) continue;\n    \n            const delimiter = delimiterMatch[1];\n            const parts = line.split(delimiterMatch[0]);\n            const key = parts[0].trim();\n            let value = parts.slice(1).join(':').trim();\n    \n            // Determine the type based on the delimiter\n            switch (delimiter) {\n                case '':\n                case '$':\n                    currentType = 'string';\n                    break;\n                case '#':\n                    currentType = 'number';\n                    break;\n                case '?':\n                    currentType = 'boolean';\n                    break;\n            }\n    \n            // Handle starting of multi-line value\n            if (value.startsWith('<')) {\n                if (value.endsWith('>')) {\n                    value = value.slice(1, -1); // Exclude both the starting '<' and closing '>'\n                    switch (currentType) {\n                        case 'number':\n                            obj[key] = parseFloat(value);\n                            break;\n                        case 'boolean':\n                            obj[key] = value.toLowerCase() === 'true';\n                            break;\n                        default:\n                            obj[key] = value;\n                            break;\n                    }\n                } else {\n                    isMultiLineValue = true;\n                    currentKey = key;\n                    currentValue = value.slice(1); // Exclude the starting '<'\n                }\n            } else {\n                switch (currentType) {\n                    case 'number':\n                        obj[key] = parseFloat(value);\n                        break;\n                    case 'boolean':\n                        obj[key] = value.toLowerCase() === 'true';\n                        break;\n                    default:\n                        obj[key] = value;\n                        break;\n                }\n            }\n        }\n    \n        return obj;\n    }\n\n    parse2(content: string): SA5Object | null {\n        const obj: SA5Object = {};\n        const lines = content.split('\\n');\n        let currentKey: string | null = null;\n        let currentValue: string | null = null;\n        let isMultiLineValue = false;\n\n        for (let line of lines) {\n            line = line.trim();\n            \n            // Skip empty lines\n            if (!line) continue;\n\n            // Handle multi-line values\n            if (isMultiLineValue) {\n                if (line.endsWith('>')) {\n                    currentValue += '\\n' + line.slice(0, -1); // Exclude the closing '>'\n                    if (currentKey !== null && currentValue !== null) {\n                        obj[currentKey] = currentValue;\n                    }\n                    isMultiLineValue = false;\n                    currentValue = null;\n                    currentKey = null;\n                } else {\n                    currentValue += '\\n' + line;\n                }\n                continue;\n            }\n\n            const parts = line.split(':');\n            const key = parts.shift()?.trim() || \"\";\n            const value = parts.join(':').trim();\n\n            // Handle starting of multi-line value\n            if (value.startsWith('<')) {\n                if (value.endsWith('>')) {\n                    obj[key] = value.slice(1, -1); // Exclude both the starting '<' and closing '>'\n                } else {\n                    isMultiLineValue = true;\n                    currentKey = key;\n                    currentValue = value.slice(1); // Exclude the starting '<'\n                }\n            } else {\n                obj[key] = value;\n            }\n        }\n\n        return obj;\n    }\n\n}\n\n\n\n"],
  "mappings": "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",
  "names": []
}
