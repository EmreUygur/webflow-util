{
  "version": 3,
  "sources": ["../../src/webflow-html/nested-list.ts"],
  "sourcesContent": ["\n\n/*\n * webflow-html\n * Nested List\n * \n * Sygnal Technology Group\n * http://sygnal.com\n * \n */\n\n\nimport { Sa5Debug } from '../webflow-core/debug';\n\n\ninterface Config {\n//    handleBreakpointChange?: ((breakpointName: string, e: MediaQueryListEvent) => void) | null;\n}\n\ninterface NestedListItem {\n    indent: number;\n    mode: string;\n    text: string;\n}\n\n// Webflow breakpoints\n\n\nexport class Sa5NestedList {\n    config: Config;\n    _element: HTMLElement;\n\n    constructor(listElement: HTMLElement, config: Config = null) {\n\n        // Verify OL or UL\n\n        this._element = listElement;\n        this.config = config;\n    }\n\n    //#region Nested Lists\n\n    /* processList\n    * Parses markup in LI's to create nested lists\n    * https://codepen.io/memetican/pen/vYjGbrd/8052e3c39d42e8c1e326b2f6ead371c5\n    */\n\n    processNestedList(): void {\n\n        const content = this._element.innerHTML;\n        const data = new DOMParser().parseFromString(content, 'text/html').body.childNodes;\n        let items: NestedListItem[] = []; \n\n        // Create list of items, for nesting\n        data.forEach((el: ChildNode, i: number) => {\n\n            if (el.nodeName !== \"LI\") return; // skip\n\n            // Set defaults\n            let item = {\n                indent: 1,\n                mode: '',\n                text: el.textContent?.trim() || ''\n            };\n\n            // Parse / resolve item detail\n            const LIST_DEPTH_LIMIT = 10;\n            for (let j = 1; j < LIST_DEPTH_LIMIT; j++) {\n                if (item.text.startsWith(\">\")) {\n                    item.text = item.text.substring(1).trim(); // remove directive \n                    item.indent++;\n                } else if (item.text.startsWith(\"+\")) {\n                    item.text = item.text.substring(1).trim(); // remove directive \n                    item.mode = \"pro\";\n                } else if (item.text.startsWith(\"-\")) {\n                    item.text = item.text.substring(1).trim(); // remove directive \n                    item.mode = \"con\";\n                } else {\n                    break; // done\n                }\n            }\n\n            items.push(item);\n        }); \n\n        // Render HTML\n        // Creates structured embedded list from the \n        // array data set. \n\n        // Usage:\n        // items = [\n        //     { indent: 1, mode: '', text: 'Level 1 Item 1' },\n        //     { indent: 3, mode: '', text: 'Level 3 Item 1' },\n        //     { indent: 3, mode: '', text: 'Level 3 Item 2' },\n        //     { indent: 1, mode: '', text: 'Level 1 Item 2' },\n        //     { indent: 2, mode: '', text: 'Level 2 Item 1' },\n        // ];\n\n        // Replace list entirely\n        this._element.replaceWith(\n            this.createList(this._element.nodeName, items)\n            );\n\n    }\n    \n    private createList(listElementType: string = 'UL', items: NestedListItem[]): HTMLElement {\n        let root = document.createElement(listElementType);\n        root.setAttribute(\"role\", \"list\"); // every level? a11y \n        let currentParent = root;\n        let parents = [root];\n      \n        for (let i = 0; i < items.length; i++) {\n\n            const item = items[i];\n            const li = document.createElement('li');\n            li.textContent = item.text;\n            if (item.mode == 'pro')\n                li.classList.add(\"wfu-pro\");\n            if (item.mode == 'con')\n                li.classList.add(\"wfu-con\");\n\n            if (item.indent > parents.length) {\n\n                for (let j = parents.length; j < item.indent; j++) {\n                    const newUL = document.createElement(listElementType);\n                    let newULparent = parents[j - 1].lastChild || parents[j - 1];\n                    newULparent.appendChild(newUL);\n                    parents.push(newUL);\n                }\n            } else if (item.indent < parents.length) {\n                parents = parents.slice(0, item.indent);\n            }\n\n            parents[parents.length - 1].appendChild(li);\n        }\n      \n        return root;\n    }\n\n    //#endregion\n\n}\n\n\n\n"],
  "mappings": ";;AA4BO,MAAM,gBAAN,MAAoB;AAAA,IAIvB,YAAY,aAA0B,SAAiB,MAAM;AAIzD,WAAK,WAAW;AAChB,WAAK,SAAS;AAAA,IAClB;AAAA,IASA,oBAA0B;AAEtB,YAAM,UAAU,KAAK,SAAS;AAC9B,YAAM,OAAO,IAAI,UAAU,EAAE,gBAAgB,SAAS,WAAW,EAAE,KAAK;AACxE,UAAI,QAA0B,CAAC;AAG/B,WAAK,QAAQ,CAAC,IAAe,MAAc;AAtDnD;AAwDY,YAAI,GAAG,aAAa;AAAM;AAG1B,YAAI,OAAO;AAAA,UACP,QAAQ;AAAA,UACR,MAAM;AAAA,UACN,QAAM,QAAG,gBAAH,mBAAgB,WAAU;AAAA,QACpC;AAGA,cAAM,mBAAmB;AACzB,iBAAS,IAAI,GAAG,IAAI,kBAAkB,KAAK;AACvC,cAAI,KAAK,KAAK,WAAW,GAAG,GAAG;AAC3B,iBAAK,OAAO,KAAK,KAAK,UAAU,CAAC,EAAE,KAAK;AACxC,iBAAK;AAAA,UACT,WAAW,KAAK,KAAK,WAAW,GAAG,GAAG;AAClC,iBAAK,OAAO,KAAK,KAAK,UAAU,CAAC,EAAE,KAAK;AACxC,iBAAK,OAAO;AAAA,UAChB,WAAW,KAAK,KAAK,WAAW,GAAG,GAAG;AAClC,iBAAK,OAAO,KAAK,KAAK,UAAU,CAAC,EAAE,KAAK;AACxC,iBAAK,OAAO;AAAA,UAChB,OAAO;AACH;AAAA,UACJ;AAAA,QACJ;AAEA,cAAM,KAAK,IAAI;AAAA,MACnB,CAAC;AAgBD,WAAK,SAAS;AAAA,QACV,KAAK,WAAW,KAAK,SAAS,UAAU,KAAK;AAAA,MAC7C;AAAA,IAER;AAAA,IAEQ,WAAW,kBAA0B,MAAM,OAAsC;AACrF,UAAI,OAAO,SAAS,cAAc,eAAe;AACjD,WAAK,aAAa,QAAQ,MAAM;AAChC,UAAI,gBAAgB;AACpB,UAAI,UAAU,CAAC,IAAI;AAEnB,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AAEnC,cAAM,OAAO,MAAM;AACnB,cAAM,KAAK,SAAS,cAAc,IAAI;AACtC,WAAG,cAAc,KAAK;AACtB,YAAI,KAAK,QAAQ;AACb,aAAG,UAAU,IAAI,SAAS;AAC9B,YAAI,KAAK,QAAQ;AACb,aAAG,UAAU,IAAI,SAAS;AAE9B,YAAI,KAAK,SAAS,QAAQ,QAAQ;AAE9B,mBAAS,IAAI,QAAQ,QAAQ,IAAI,KAAK,QAAQ,KAAK;AAC/C,kBAAM,QAAQ,SAAS,cAAc,eAAe;AACpD,gBAAI,cAAc,QAAQ,IAAI,GAAG,aAAa,QAAQ,IAAI;AAC1D,wBAAY,YAAY,KAAK;AAC7B,oBAAQ,KAAK,KAAK;AAAA,UACtB;AAAA,QACJ,WAAW,KAAK,SAAS,QAAQ,QAAQ;AACrC,oBAAU,QAAQ,MAAM,GAAG,KAAK,MAAM;AAAA,QAC1C;AAEA,gBAAQ,QAAQ,SAAS,GAAG,YAAY,EAAE;AAAA,MAC9C;AAEA,aAAO;AAAA,IACX;AAAA,EAIJ;",
  "names": []
}
