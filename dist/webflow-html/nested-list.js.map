{
  "version": 3,
  "sources": ["../../src/webflow-html/nested-list.ts"],
  "sourcesContent": ["\n\n/*\n * webflow-html\n * Nested List\n * \n * Sygnal Technology Group\n * http://sygnal.com\n * \n */\n\n\nimport { Sa5Debug } from '../webflow-core/debug';\n\n\ninterface Config {\n//    handleBreakpointChange?: ((breakpointName: string, e: MediaQueryListEvent) => void) | null;\n}\n\n// Webflow breakpoints\n\n\nexport class Sa5NestedList {\n    config: Config;\n    _element: HTMLElement;\n\n    constructor(listElement: HTMLElement, config: Config = null) {\n        this._element = listElement;\n        this.config = config;\n    }\n\n    //#region Nested Lists\n\n    /* processList\n    * Parses markup in LI's to create nested lists\n    * https://codepen.io/memetican/pen/vYjGbrd/8052e3c39d42e8c1e326b2f6ead371c5\n    */\n\n    processNestedLists(): void {\n        const content = this._element.innerHTML;\n        const data = new DOMParser().parseFromString(content, 'text/html').body.childNodes;\n        const items: Array<{indent: number, mode: string, text: string}> = [];\n\n        data.forEach((el: ChildNode, i: number) => {\n            if (el.nodeName !== \"LI\") return; // skip\n\n            let item = {\n                indent: 1,\n                mode: '',\n                text: el.textContent?.trim() || ''\n            };\n\n            items.push(item);\n\n            const limit = 10;\n            for (let j = 1; j < limit; j += 1) {\n                if (item.text.startsWith(\"&gt;\")) {\n                    item.text = item.text.substring(4).trim(); // remove directive \n                    item.indent++;\n                } else if (item.text.startsWith(\"+\")) {\n                    item.text = item.text.substring(1).trim(); // remove directive \n                    item.mode = \"pro\";\n                } else if (item.text.startsWith(\"-\")) {\n                    item.text = item.text.substring(1).trim(); // remove directive \n                    item.mode = \"con\";\n                } else {\n                    break; // done\n                }\n            }\n        });\n    }\n\n    /*\n\n    export var processList = function (list) {\n        //        console.log(`LIST -------------------------`);\n\n        var content = $(list).html();\n    //    console.log(content);\n\n        var data = $.parseHTML(content);\n        var items = [];\n\n        $.each(data, function (i, el) {\n\n    //        console.log(el);\n            \n    //        console.log(JSON.stringify(el));\n    //        console.log(el.nodeName);\n    //        console.log(el.nodeType);\n\n            if (el.nodeName != \"LI\")\n                return; // skip\n\n            var item = {\n                indent: 1,\n                mode: '',\n                text: $(el).html().trim()\n            };\n\n            items.push(item);\n            //        console.log(`${i} ${item.text} ${items.length}`);\n\n            var limit = 10;\n            for (var j = 1; j < limit; j += 1) {\n\n                if (item.text.startsWith(\"&gt;\")) {\n                    item.text = item.text.substring(4).trim(); // remove directive \n                    item.indent++;\n                } else if (item.text.startsWith(\"+\")) {\n                    item.text = item.text.substring(1).trim(); // remove directive \n                    item.mode = \"pro\";\n                } else if (item.text.startsWith(\"-\")) {\n                    item.text = item.text.substring(1).trim(); // remove directive \n                    item.mode = \"con\";\n                } else {\n                    break; // done\n                }\n\n            }\n\n        });\n\n        // Render HTML\n        // Creates structured embedded list from the \n        // array data set. \n\n        var outHtml = '';\n        var level = 1;\n        var tag = list.tagName.toLowerCase();\n        var prevLevel = 1;\n\n        $.each(items, function (i, item) {\n\n            // Add optional PRO/CON class \n            var attr = '';\n            if (item.mode == 'pro')\n                attr = \" class='wfu-pro'\";\n            if (item.mode == 'con')\n                attr = \" class='wfu-con'\";\n\n            prevLevel = level;\n\n            if (item.indent > level) {\n\n                for (var l = level + 1; l <= item.indent; l += 1)\n                    outHtml += `<${tag} class=\"wfu-list-level-${l}\">`;\n                outHtml += `<li${attr}>${item.text}`;\n\n                level = item.indent;\n\n            } else if (item.indent < level) {\n\n                outHtml += `</li></${tag}>`.repeat(level - item.indent);\n                outHtml += `</li>`;\n                outHtml += `<li${attr}>${item.text}`;\n                level = item.indent;\n\n            } else {\n\n                if (i > 0)\n                    outHtml += `</li>`;\n                outHtml += `<li${attr}>${item.text}`;\n\n            }\n\n        });\n\n        if (level > 1)\n            outHtml += `</li></${tag}>`.repeat(level - 1);\n        outHtml += `</li>`;\n        level = 1;\n\n        $(list).html(outHtml);\n\n    }\n\n    */\n\n    //#endregion\n\n}\n\n\n\n"],
  "mappings": ";;AAsBO,MAAM,gBAAN,MAAoB;AAAA,IAIvB,YAAY,aAA0B,SAAiB,MAAM;AACzD,WAAK,WAAW;AAChB,WAAK,SAAS;AAAA,IAClB;AAAA,IASA,qBAA2B;AACvB,YAAM,UAAU,KAAK,SAAS;AAC9B,YAAM,OAAO,IAAI,UAAU,EAAE,gBAAgB,SAAS,WAAW,EAAE,KAAK;AACxE,YAAM,QAA6D,CAAC;AAEpE,WAAK,QAAQ,CAAC,IAAe,MAAc;AA3CnD;AA4CY,YAAI,GAAG,aAAa;AAAM;AAE1B,YAAI,OAAO;AAAA,UACP,QAAQ;AAAA,UACR,MAAM;AAAA,UACN,QAAM,QAAG,gBAAH,mBAAgB,WAAU;AAAA,QACpC;AAEA,cAAM,KAAK,IAAI;AAEf,cAAM,QAAQ;AACd,iBAAS,IAAI,GAAG,IAAI,OAAO,KAAK,GAAG;AAC/B,cAAI,KAAK,KAAK,WAAW,MAAM,GAAG;AAC9B,iBAAK,OAAO,KAAK,KAAK,UAAU,CAAC,EAAE,KAAK;AACxC,iBAAK;AAAA,UACT,WAAW,KAAK,KAAK,WAAW,GAAG,GAAG;AAClC,iBAAK,OAAO,KAAK,KAAK,UAAU,CAAC,EAAE,KAAK;AACxC,iBAAK,OAAO;AAAA,UAChB,WAAW,KAAK,KAAK,WAAW,GAAG,GAAG;AAClC,iBAAK,OAAO,KAAK,KAAK,UAAU,CAAC,EAAE,KAAK;AACxC,iBAAK,OAAO;AAAA,UAChB,OAAO;AACH;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EA+GJ;",
  "names": []
}
