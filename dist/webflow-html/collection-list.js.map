{
  "version": 3,
  "sources": ["../../src/webflow-html/collection-list.ts"],
  "sourcesContent": ["/*\n * webflow-html\n * Collection List\n * \n * Sygnal Technology Group\n * http://sygnal.com\n * \n */\n\n\nimport { Sa5Debug } from '../webflow-core/debug';\n\n\ninterface Config {\n//    handleBreakpointChange?: ((breakpointName: string, e: MediaQueryListEvent) => void) | null;\n}\n\n// Webflow breakpoints\n\n\nexport class Sa5CollectionList {\n    config: Config;\n    _element: HTMLElement; \n\n    constructor(elem: HTMLElement, config: Config = null) {\n        this.config = config;\n        this._element = elem;\n    }\n\n    init() {\n\n    }\n\n    sort(): void {\n        console.group(\"SORT\");\n\n        const list = this._element;\n        const mode = list.getAttribute(\"wfu-sort\") || \"default\";\n        const dir = list.getAttribute(\"wfu-sort-dir\") || \"asc\";\n        const sortType = list.getAttribute(\"wfu-sort-type\") || \"string\";\n\n        const items = Array.from(list.children);\n\n        console.debug(`WFU sorting ${mode} ${sortType} ${dir} (${items.length} children)`);\n\n        console.debug({\n            name: \"WFU sorting\", \n            mode: mode, \n            sortType: sortType, \n            dir: dir, \n            children: `${items.length} children`\n        });\n\n//        console.debug(list.children); \n\n        // If Random sort, do it now \n        if(dir == \"random\") {\n\n            // Randomize\n            items.sort(() => Math.random() - 0.5); \n\n        } else {\n\n            items.sort((a: Element, b: Element) => {\n                const key1 = \n                    a.getAttribute(\"wfu-sort-key\") || \n                        a.querySelector(\"[wfu-sort-key]\")?.getAttribute(\"wfu-sort-key\") || '';\n                const key2 = \n                    b.getAttribute(\"wfu-sort-key\") ||\n                        b.querySelector(\"[wfu-sort-key]\")?.getAttribute(\"wfu-sort-key\") || '';\n\n                // Determine asc sort result\n                let sortResult = 1;\n                switch (sortType) {\n                    case \"date\":\n                        sortResult = new Date(key1) < new Date(key2) ? -1 : 1;\n                        console.debug(`comparing dates ${key1} ${key2} = ${sortResult}`);\n                        break;\n                    case \"number\":\n                        sortResult = Number(key1) < Number(key2) ? -1 : 1;\n                        console.debug(`comparing numbers ${key1} ${key2} = ${sortResult}`);\n                        break;\n                    case \"semver\":\n                        // Semver comparison logic here\n                        break;\n                    case \"string\":\n                    default:\n\n\n\n                        sortResult = key1.localeCompare(key2);\n                        console.debug(`comparing strings ${key1} ${key2} = ${sortResult}`);\n                        break;\n                }\n\n                // Invert for desc\n                if (dir != \"asc\") {\n                    sortResult = sortResult * -1;\n                }\n\n                return sortResult;\n            });\n\n        }\n\n        // Write children back \n        while (list.firstChild) {\n            list.firstChild.remove();\n        }\n        items.forEach(item => list.appendChild(item));\n\n        // Remove attribute to display \n        list.removeAttribute(\"wfu-sort\");\n\n        console.groupEnd();\n    }\n\n}\n\n\n\n\n\n\n//#region Sorting\n\n/* sortCollectionList\n * Sorts a Collection List\n * https://codepen.io/memetican/pen/oNygGLj/259b05cd6be71a16d2f4787e0714278f\n */\n\n\n/*\n\nexport var sortCollectionList = function (l) {\n\n    console.group(\"SORT\");\n\n    const $list = $(l);\n    const mode = $list.attr(\"wfu-sort\") || \"default\";\n    const dir = $list.attr(\"wfu-sort-dir\") || \"asc\";\n    const sortType = $list.attr(\"wfu-sort-type\") || \"string\";\n\n    var $items = $list.children();\n\n    console.debug(`WFU sorting ${mode} ${sortType} ${dir} (${$items.length} children)`);\n\n    console.debug({\n        name: \"WFU sorting\", \n        mode: mode, \n        sortType: sortType, \n        dir: dir, \n        children: `${$items.length} children`\n    });\n\n    console.debug('before.');\n\n    console.debug($list.children()); \n\n    // If Random sort, do it now \n    // uses jQuery extension, defined above\n    if(dir == \"random\") {\n\n        // Randomize\n        // updates element order directly, immediately\n        $list.children().shuffle();\n\n    } else {\n\n        $items.sort(function (a, b) {\n\n            const key1 = $(a).find(\"[wfu-sort-key]\").attr(\"wfu-sort-key\");\n            const key2 = $(b).find(\"[wfu-sort-key]\").attr(\"wfu-sort-key\");\n\n            // Determine asc sort result\n            var sortResult = 1;\n            switch (sortType) {\n                case \"date\":\n\n                    sortResult = new Date(key1) < new Date(key2) ? -1 : 1;\n                    console.debug(`comparing dates ${key1} ${key2} = ${sortResult}`);\n\n                    break;\n                case \"number\":\n\n                    sortResult = new Number(key1) < new Number(key2) ? -1 : 1;\n                    console.debug(`comparing numbers ${key1} ${key2} = ${sortResult}`);\n\n                    break;\n                case \"semver\":\n\n                    const semver1 = `${key1}.0.0.0`.split('.');\n                    const semver2 = `${key2}.0.0.0`.split('.');\n\n                    // https://semver.org/#spec-item-11\n\n                    // Precedence is determined by the first difference when comparing each \n                    // of these identifiers from left to right as follows: \n                    // Major, minor, and patch versions are always compared numerically.\n                    for (var p = 0; p < 4; p++) \n                        if (semver1[p] != semver2[p])\n                            break;\n\n                    // Numeric identifiers always have lower precedence than non-numeric identifiers.\n\n                    // Identifiers with letters or hyphens are compared lexically in ASCII sort order.\n\n                        // https://semver.org/#:~:text=Precedence%20for%20two%20pre%2Drelease%20versions%20with%20the%20same%20major%2C%20minor%2C%20and%20patch\n\n    //                console.log(`semver difference at part ${p}`);\n\n                    // Identifiers consisting of only digits are compared numerically.\n\n                    // Compare; if same, doesn't matter\n                    sortResult = new Number(semver1[p]) < new Number(semver2[p]) ? -1 : 1;\n                    console.debug(`comparing semvers ${key1} ${key2} = ${sortResult}`);\n\n                    break;\n                case \"string\":\n                default:\n\n                    sortResult = key1.localeCompare(key2);\n                    console.debug(`comparing strings ${key1} ${key2} = ${sortResult}`);\n\n                    break;\n            }\n\n            // Invert for desc\n            if (dir != \"asc\") {\n                sortResult = sortResult * -1;\n            }\n\n            return sortResult;\n        });\n\n        console.debug('writing.');\n        $list.html($items);\n\n    }\n\n    // Remove attribute to display \n    $list.removeAttr(\"wfu-sort\");\n\n    console.groupEnd();\n\n}\n\n*/ \n\n//#endregion\n"],
  "mappings": ";;AAoBO,MAAM,oBAAN,MAAwB;AAAA,IAI3B,YAAY,MAAmB,SAAiB,MAAM;AAClD,WAAK,SAAS;AACd,WAAK,WAAW;AAAA,IACpB;AAAA,IAEA,OAAO;AAAA,IAEP;AAAA,IAEA,OAAa;AACT,cAAQ,MAAM,MAAM;AAEpB,YAAM,OAAO,KAAK;AAClB,YAAM,OAAO,KAAK,aAAa,UAAU,KAAK;AAC9C,YAAM,MAAM,KAAK,aAAa,cAAc,KAAK;AACjD,YAAM,WAAW,KAAK,aAAa,eAAe,KAAK;AAEvD,YAAM,QAAQ,MAAM,KAAK,KAAK,QAAQ;AAEtC,cAAQ,MAAM,eAAe,QAAQ,YAAY,QAAQ,MAAM,kBAAkB;AAEjF,cAAQ,MAAM;AAAA,QACV,MAAM;AAAA,QACN;AAAA,QACA;AAAA,QACA;AAAA,QACA,UAAU,GAAG,MAAM;AAAA,MACvB,CAAC;AAKD,UAAG,OAAO,UAAU;AAGhB,cAAM,KAAK,MAAM,KAAK,OAAO,IAAI,GAAG;AAAA,MAExC,OAAO;AAEH,cAAM,KAAK,CAAC,GAAY,MAAe;AA/DnD;AAgEgB,gBAAM,OACF,EAAE,aAAa,cAAc,OACzB,OAAE,cAAc,gBAAgB,MAAhC,mBAAmC,aAAa,oBAAmB;AAC3E,gBAAM,OACF,EAAE,aAAa,cAAc,OACzB,OAAE,cAAc,gBAAgB,MAAhC,mBAAmC,aAAa,oBAAmB;AAG3E,cAAI,aAAa;AACjB,kBAAQ,UAAU;AAAA,YACd,KAAK;AACD,2BAAa,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK;AACpD,sBAAQ,MAAM,mBAAmB,QAAQ,UAAU,YAAY;AAC/D;AAAA,YACJ,KAAK;AACD,2BAAa,OAAO,IAAI,IAAI,OAAO,IAAI,IAAI,KAAK;AAChD,sBAAQ,MAAM,qBAAqB,QAAQ,UAAU,YAAY;AACjE;AAAA,YACJ,KAAK;AAED;AAAA,YACJ,KAAK;AAAA,YACL;AAII,2BAAa,KAAK,cAAc,IAAI;AACpC,sBAAQ,MAAM,qBAAqB,QAAQ,UAAU,YAAY;AACjE;AAAA,UACR;AAGA,cAAI,OAAO,OAAO;AACd,yBAAa,aAAa;AAAA,UAC9B;AAEA,iBAAO;AAAA,QACX,CAAC;AAAA,MAEL;AAGA,aAAO,KAAK,YAAY;AACpB,aAAK,WAAW,OAAO;AAAA,MAC3B;AACA,YAAM,QAAQ,UAAQ,KAAK,YAAY,IAAI,CAAC;AAG5C,WAAK,gBAAgB,UAAU;AAE/B,cAAQ,SAAS;AAAA,IACrB;AAAA,EAEJ;",
  "names": []
}
