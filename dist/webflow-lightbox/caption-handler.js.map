{
  "version": 3,
  "sources": ["../../src/webflow-lightbox/caption-handler.ts"],
  "sourcesContent": ["\r\n/*\r\n * webflow-lightbox\r\n * Caption Handler\r\n * \r\n * Sygnal Technology Group\r\n * http://sygnal.com\r\n * \r\n * Extensions to Webflow's lightbox element. \r\n */\r\n\r\n\r\n/** \r\n * Lightbox class.\r\n */\r\n\r\nvar defaultConfig = {\r\n}\r\n\r\nexport class Sa5LightboxCaptionHandler {\r\n\r\n    config; // Optional config\r\n    lightboxNavObserver;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    init() {\r\n    \r\n        // Create lightbox state mutation observer\r\n        let observer = new MutationObserver(this.lightBoxStateCallback);\r\n        observer.observe(document.getElementsByTagName(\"html\")[0], {\r\n            childList: false, // observe direct children\r\n            subtree: false, // and lower descendants too\r\n            characterDataOldValue: false, // pass old data to callback \r\n            attributes: true, \r\n            attributeFilter: [\"class\"]\r\n        });\r\n\r\n    }\r\n\r\n    installLightBoxNavObserver() {\r\n        \r\n        this.setupCaption();\r\n\r\n        let lightboxContainer = document.querySelector(\".w-lightbox-container\");\r\n\r\n        if (lightboxContainer) {\r\n            let lightboxNavObserver = new MutationObserver(this.lightBoxNavCallback);\r\n\r\n            // Options for the observer (which mutations to observe)\r\n            const config = { childList: true, subtree: true };\r\n\r\n            // Start observing the target node for configured mutations\r\n            lightboxNavObserver.observe(lightboxContainer, config);\r\n        }\r\n\r\n    } \r\n        \r\n    uninstallLightBoxNavObserver() {\r\n\r\n        if (this.lightboxNavObserver)\r\n            this.lightboxNavObserver.disconnect();\r\n            \r\n    }\r\n    \r\n    setupCaption() {\r\n\r\n        let figure = document.querySelector(\"figure.w-lightbox-figure\");\r\n\r\n        if (figure) {\r\n            let img = figure.querySelector(\"img\");\r\n            let captionElement = figure.querySelector(\"figcaption\");\r\n        \r\n            if (img) {\r\n                let key = img.getAttribute(\"src\");\r\n                let thumb = document.querySelector(`img[ref-key='${key}']`);\r\n            \r\n                if (captionElement) {\r\n                    // Remove existing figcaption\r\n                    captionElement.remove();\r\n                }\r\n            \r\n                if (thumb) {\r\n                    let caption = thumb.getAttribute(\"alt\");\r\n                    \r\n                    if (caption) {\r\n                        // Append new figcaption\r\n                        let newCaption = document.createElement(\"figcaption\");\r\n                        newCaption.textContent = caption;\r\n                        newCaption.classList.add(\"w-lightbox-caption\");\r\n                        figure.appendChild(newCaption);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n                \r\n    }\r\n\r\n    lightBoxStateCallback = (mutationList: MutationRecord[], observer: MutationObserver) => {\r\n\r\n        for (const mutation of mutationList) {\r\n            if (mutation.type === 'attributes' && mutation.target instanceof HTMLElement) {\r\n                if (mutation.target.classList.contains(\"w-lightbox-noscroll\")) {\r\n                    console.debug(\"Lightbox opened.\");\r\n                    this.installLightBoxNavObserver();\r\n                } else {\r\n                    console.debug(\"Lightbox closed.\");\r\n                    this.uninstallLightBoxNavObserver();\r\n                }\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    lightBoxNavCallback = (mutationList: MutationRecord[], observer: MutationObserver) => {\r\n        for (let mutation of mutationList) {\r\n            if (mutation.target instanceof HTMLElement) {\r\n                if (mutation.target.classList.contains(\"w-lightbox-content\")) {\r\n                    this.setupCaption();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n"],
  "mappings": ";;AAmBO,MAAM,4BAAN,MAAgC;AAAA,IAKnC,cAAc;AA2Ed,mCAAwB,CAAC,cAAgC,aAA+B;AAEpF,mBAAW,YAAY,cAAc;AACjC,cAAI,SAAS,SAAS,gBAAgB,SAAS,kBAAkB,aAAa;AAC1E,gBAAI,SAAS,OAAO,UAAU,SAAS,qBAAqB,GAAG;AAC3D,sBAAQ,MAAM,kBAAkB;AAChC,mBAAK,2BAA2B;AAAA,YACpC,OAAO;AACH,sBAAQ,MAAM,kBAAkB;AAChC,mBAAK,6BAA6B;AAAA,YACtC;AAAA,UACJ;AAAA,QACJ;AAAA,MAEJ;AAEA,iCAAsB,CAAC,cAAgC,aAA+B;AAClF,iBAAS,YAAY,cAAc;AAC/B,cAAI,SAAS,kBAAkB,aAAa;AACxC,gBAAI,SAAS,OAAO,UAAU,SAAS,oBAAoB,GAAG;AAC1D,mBAAK,aAAa;AAAA,YACtB;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IAlGA;AAAA,IAEA,OAAO;AAGH,UAAI,WAAW,IAAI,iBAAiB,KAAK,qBAAqB;AAC9D,eAAS,QAAQ,SAAS,qBAAqB,MAAM,EAAE,IAAI;AAAA,QACvD,WAAW;AAAA,QACX,SAAS;AAAA,QACT,uBAAuB;AAAA,QACvB,YAAY;AAAA,QACZ,iBAAiB,CAAC,OAAO;AAAA,MAC7B,CAAC;AAAA,IAEL;AAAA,IAEA,6BAA6B;AAEzB,WAAK,aAAa;AAElB,UAAI,oBAAoB,SAAS,cAAc,uBAAuB;AAEtE,UAAI,mBAAmB;AACnB,YAAI,sBAAsB,IAAI,iBAAiB,KAAK,mBAAmB;AAGvE,cAAM,SAAS,EAAE,WAAW,MAAM,SAAS,KAAK;AAGhD,4BAAoB,QAAQ,mBAAmB,MAAM;AAAA,MACzD;AAAA,IAEJ;AAAA,IAEA,+BAA+B;AAE3B,UAAI,KAAK;AACL,aAAK,oBAAoB,WAAW;AAAA,IAE5C;AAAA,IAEA,eAAe;AAEX,UAAI,SAAS,SAAS,cAAc,0BAA0B;AAE9D,UAAI,QAAQ;AACR,YAAI,MAAM,OAAO,cAAc,KAAK;AACpC,YAAI,iBAAiB,OAAO,cAAc,YAAY;AAEtD,YAAI,KAAK;AACL,cAAI,MAAM,IAAI,aAAa,KAAK;AAChC,cAAI,QAAQ,SAAS,cAAc,gBAAgB,OAAO;AAE1D,cAAI,gBAAgB;AAEhB,2BAAe,OAAO;AAAA,UAC1B;AAEA,cAAI,OAAO;AACP,gBAAI,UAAU,MAAM,aAAa,KAAK;AAEtC,gBAAI,SAAS;AAET,kBAAI,aAAa,SAAS,cAAc,YAAY;AACpD,yBAAW,cAAc;AACzB,yBAAW,UAAU,IAAI,oBAAoB;AAC7C,qBAAO,YAAY,UAAU;AAAA,YACjC;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IAEJ;AAAA,EA4BJ;",
  "names": []
}
