{
  "version": 3,
  "sources": ["../../src/webflow-lightbox/caption-handler.ts"],
  "sourcesContent": ["\n/*\n * webflow-lightbox\n * Caption Handler\n * \n * Sygnal Technology Group\n * http://sygnal.com\n * \n * Extensions to Webflow's lightbox element. \n */\n\n\n/** \n * Lightbox class.\n */\n\nvar defaultConfig = {\n}\n\nexport class Sa5LightboxCaptionHandler {\n\n    config; // Optional config\n//    _element: HTMLElement;\n\n    constructor() {\n\n//        this._element = element;\n//        this.config = $.extend({}, defaultConfig, config);\n    \n    }\n\n    init() {\n    \n        // Create lightbox state mutation observer\n        let observer = new MutationObserver(this.lightBoxStateCallback);\n        observer.observe(document.getElementsByTagName(\"html\")[0], {\n            childList: false, // observe direct children\n            subtree: false, // and lower descendants too\n            characterDataOldValue: false, // pass old data to callback \n            attributes: true, \n            attributeFilter: [\"class\"]\n        });\n\n    }\n\n    lightBoxStateCallback = (mutationList: MutationRecord[], observer: MutationObserver) => {\n        for (const mutation of mutationList) {\n            if (mutation.type === 'attributes' && mutation.target instanceof HTMLElement) {\n                if (mutation.target.classList.contains(\"w-lightbox-noscroll\")) {\n                    console.debug(\"Lightbox opened.\");\n                    this.installLightBoxNavObserver();\n                } else {\n                    console.debug(\"Lightbox closed.\");\n                    this.uninstallLightBoxNavObserver();\n                }\n            }\n        }\n    };\n\n    /* \n    const lightBoxStateCallback = (mutationList, observer) => {\n        for (const mutation of mutationList) {\n            if (mutation.type === 'attributes') {\n            \n                if ($(\"html\").hasClass(\"w-lightbox-noscroll\")) {\n                    console.debug(\"Lightbox opened.\");\n                    installLightBoxNavObserver();\n                } else {\n                    console.debug(\"Lightbox closed.\"); \n                    uninstallLightBoxNavObserver();\n                }\n                \n            }\n        }\n    };\n    */\n    \n    lightboxNavObserver;\n    \n    setupCaption() {\n    \n        /*\n        const figure = $(\"figure.w-lightbox-figure\");\n        const img = figure.children(\"img\");\n        const key = img.attr(\"src\");\n        const thumb = $(`img[ref-key='${key}'`); \n        const caption = thumb.attr(\"alt\");\n        \n        figure.children(\"figcaption\").remove();\n        \n        if (caption)\n            figure.append(\n                $(`<figcaption class=\"w-lightbox-caption\">${caption}</figcaption>`)\n                );\n    */ \n\n        let figure = document.querySelector(\"figure.w-lightbox-figure\");\n\n        if (figure) {\n            let img = figure.querySelector(\"img\");\n            let captionElement = figure.querySelector(\"figcaption\");\n        \n            if (img) {\n            let key = img.getAttribute(\"src\");\n            let thumb = document.querySelector(`img[ref-key='${key}']`);\n        \n            if (captionElement) {\n                // Remove existing figcaption\n                captionElement.remove();\n            }\n        \n            if (thumb) {\n                let caption = thumb.getAttribute(\"alt\");\n                \n                if (caption) {\n                // Append new figcaption\n                let newCaption = document.createElement(\"figcaption\");\n                newCaption.textContent = caption;\n                newCaption.classList.add(\"w-lightbox-caption\");\n                figure.appendChild(newCaption);\n                }\n            }\n            }\n        }\n                \n    }\n        \n    uninstallLightBoxNavObserver() {\n        if (this.lightboxNavObserver)\n            this.lightboxNavObserver.disconnect();\n    }\n  \n    installLightBoxNavObserver() {\n        \n        this.setupCaption();\n\n        let lightboxContainer = document.querySelector(\".w-lightbox-container\");\n\n        if (lightboxContainer) {\n            let lightboxNavObserver = new MutationObserver(this.lightBoxNavCallback);\n\n            // Options for the observer (which mutations to observe)\n            const config = { childList: true, subtree: true };\n\n            // Start observing the target node for configured mutations\n            lightboxNavObserver.observe(lightboxContainer, config);\n        }\n\n    /* \n        lightboxNavObserver = new MutationObserver(lightBoxNavCallback);\n        lightboxNavObserver.observe($(\".w-lightbox-container\")[0], {\n            childList: true, // observe direct children\n            subtree: true // and lower descendants too\n        });\n        */\n    } \n\n\n    lightBoxNavCallback = (mutationList: MutationRecord[], observer: MutationObserver) => {\n        for (let mutation of mutationList) {\n            if (mutation.target instanceof HTMLElement) {\n                if (mutation.target.classList.contains(\"w-lightbox-content\")) {\n                    this.setupCaption();\n                }\n            }\n        }\n    }\n\n    /* \n    const lightBoxNavCallback = (mutationList, observer) => {\n        for (let mutation of mutationList) {\n    \n            // if ($(mutation.target).hasClass(\"w-lightbox-view\")) { \n            //     $(mutation.target).children(\"figcaption\").remove();\n            // }\n\n            if ($(mutation.target).hasClass(\"w-lightbox-content\")) { \n                setupCaption(); \n            }\n        }\n        \n    };\n    */\n\n}\n\n"],
  "mappings": ";;AAmBO,MAAM,4BAAN,MAAgC;AAAA,IAKnC,cAAc;AAqBd,mCAAwB,CAAC,cAAgC,aAA+B;AACpF,mBAAW,YAAY,cAAc;AACjC,cAAI,SAAS,SAAS,gBAAgB,SAAS,kBAAkB,aAAa;AAC1E,gBAAI,SAAS,OAAO,UAAU,SAAS,qBAAqB,GAAG;AAC3D,sBAAQ,MAAM,kBAAkB;AAChC,mBAAK,2BAA2B;AAAA,YACpC,OAAO;AACH,sBAAQ,MAAM,kBAAkB;AAChC,mBAAK,6BAA6B;AAAA,YACtC;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAqGA,iCAAsB,CAAC,cAAgC,aAA+B;AAClF,iBAAS,YAAY,cAAc;AAC/B,cAAI,SAAS,kBAAkB,aAAa;AACxC,gBAAI,SAAS,OAAO,UAAU,SAAS,oBAAoB,GAAG;AAC1D,mBAAK,aAAa;AAAA,YACtB;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IAzIA;AAAA,IAEA,OAAO;AAGH,UAAI,WAAW,IAAI,iBAAiB,KAAK,qBAAqB;AAC9D,eAAS,QAAQ,SAAS,qBAAqB,MAAM,EAAE,IAAI;AAAA,QACvD,WAAW;AAAA,QACX,SAAS;AAAA,QACT,uBAAuB;AAAA,QACvB,YAAY;AAAA,QACZ,iBAAiB,CAAC,OAAO;AAAA,MAC7B,CAAC;AAAA,IAEL;AAAA,IAoCA,eAAe;AAiBX,UAAI,SAAS,SAAS,cAAc,0BAA0B;AAE9D,UAAI,QAAQ;AACR,YAAI,MAAM,OAAO,cAAc,KAAK;AACpC,YAAI,iBAAiB,OAAO,cAAc,YAAY;AAEtD,YAAI,KAAK;AACT,cAAI,MAAM,IAAI,aAAa,KAAK;AAChC,cAAI,QAAQ,SAAS,cAAc,gBAAgB,OAAO;AAE1D,cAAI,gBAAgB;AAEhB,2BAAe,OAAO;AAAA,UAC1B;AAEA,cAAI,OAAO;AACP,gBAAI,UAAU,MAAM,aAAa,KAAK;AAEtC,gBAAI,SAAS;AAEb,kBAAI,aAAa,SAAS,cAAc,YAAY;AACpD,yBAAW,cAAc;AACzB,yBAAW,UAAU,IAAI,oBAAoB;AAC7C,qBAAO,YAAY,UAAU;AAAA,YAC7B;AAAA,UACJ;AAAA,QACA;AAAA,MACJ;AAAA,IAEJ;AAAA,IAEA,+BAA+B;AAC3B,UAAI,KAAK;AACL,aAAK,oBAAoB,WAAW;AAAA,IAC5C;AAAA,IAEA,6BAA6B;AAEzB,WAAK,aAAa;AAElB,UAAI,oBAAoB,SAAS,cAAc,uBAAuB;AAEtE,UAAI,mBAAmB;AACnB,YAAI,sBAAsB,IAAI,iBAAiB,KAAK,mBAAmB;AAGvE,cAAM,SAAS,EAAE,WAAW,MAAM,SAAS,KAAK;AAGhD,4BAAoB,QAAQ,mBAAmB,MAAM;AAAA,MACzD;AAAA,IASJ;AAAA,EA6BJ;",
  "names": []
}
