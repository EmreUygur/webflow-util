{
  "version": 3,
  "sources": ["../src/webflow-format.ts"],
  "sourcesContent": ["\n/*\n * webflow-format\n * \n * Sygnal Technology Group\n * http://sygnal.com\n * \n * Data Formatting Utilities\n */\n\n\n\n\nexport class WebflowFormat {\n\n    // Initialize\n    constructor() {\n\n    }\n\n    // Simplest-case encoding for HTML5\n    formatField  (elem : HTMLElement) {\n\n        // How to assign JSON string to Javascript variable?\n        // https://stackoverflow.com/a/31372143\n        const fs = new Map([\n            [\"usd\", {\n                \"locale\": 'en-US',\n                \"style\": 'currency',\n                \"currency\": 'USD',\n            }],\n            [\"gbp\", {\n                \"locale\": 'en-US',\n                \"style\": 'currency',\n                \"currency\": 'GBP',\n            }],\n            [\"eur\", {\n                \"locale\": 'en-US',\n                \"style\": 'currency',\n                \"currency\": 'EUR',\n            }],\n            [\"jpy\", {\n                \"locale\": 'ja-JP',\n                \"style\": 'currency',\n                \"currency\": 'JPY'\n            }],\n            [\"percent\", {\n                \"locale\": 'en-US',\n                \"style\": 'percent',\n            }],\n            [\"%\", {\n                \"locale\": 'en-US',\n                \"style\": 'percent',\n            }],\n            [\"comma\", {\n                \"locale\": 'en-US',\n    //            \"style\": 'percent',\n            }],\n            [\",\", {\n                \"locale\": 'en-US',\n    //            \"style\": 'percent',\n            }],\n        ]);\n        // Important- this approach handles common scenarios,\n        // but does not handle quotes or special accented characters.\n        // See https://www.php.net/htmlspecialchars\n\n        elem.innerText\n//        const $item = $(elem);\n        const txt = elem.innerText; //$item.text();\n        const val: number = parseFloat(txt);\n\n        var fn = elem.getAttribute(\"wfu-format\"); // e.g. \"usd\";\n\n        // Determine the number of decimal places\n        // this is set in the Designer, as the formatting of the numeric item\n        var decimals = 0;\n        if (txt.includes('.'))\n            decimals = txt.split('.')[1].length;\n\n        // Get the base formatting rules\n        var f = fs.get(fn);\n\n    //    console.log(fn);\n    //    console.log(JSON.stringify(f));\n\n        var settings = {};\n        settings[\"style\"] = f.style;\n        settings[\"currency\"] = f.currency;\n        settings[\"minimumFractionDigits\"] = decimals;\n        settings[\"maximumFractionDigits\"] = decimals;\n        //    settings.roundingIncrement = 1; \n    //    console.log(JSON.stringify(settings));\n\n    // Format the item\n        const formatter = new Intl.NumberFormat(f.locale, settings);\n\n        // Apply the formatting\n        elem.innerHTML = formatter.format(val);\n\n    }\n\n}\n\n\n\n"],
  "mappings": ";;AAaO,MAAM,gBAAN,MAAoB;AAAA,IAGvB,cAAc;AAAA,IAEd;AAAA,IAGA,YAAc,MAAoB;AAI9B,YAAM,KAAK,oBAAI,IAAI;AAAA,QACf,CAAC,OAAO;AAAA,UACJ,UAAU;AAAA,UACV,SAAS;AAAA,UACT,YAAY;AAAA,QAChB,CAAC;AAAA,QACD,CAAC,OAAO;AAAA,UACJ,UAAU;AAAA,UACV,SAAS;AAAA,UACT,YAAY;AAAA,QAChB,CAAC;AAAA,QACD,CAAC,OAAO;AAAA,UACJ,UAAU;AAAA,UACV,SAAS;AAAA,UACT,YAAY;AAAA,QAChB,CAAC;AAAA,QACD,CAAC,OAAO;AAAA,UACJ,UAAU;AAAA,UACV,SAAS;AAAA,UACT,YAAY;AAAA,QAChB,CAAC;AAAA,QACD,CAAC,WAAW;AAAA,UACR,UAAU;AAAA,UACV,SAAS;AAAA,QACb,CAAC;AAAA,QACD,CAAC,KAAK;AAAA,UACF,UAAU;AAAA,UACV,SAAS;AAAA,QACb,CAAC;AAAA,QACD,CAAC,SAAS;AAAA,UACN,UAAU;AAAA,QAEd,CAAC;AAAA,QACD,CAAC,KAAK;AAAA,UACF,UAAU;AAAA,QAEd,CAAC;AAAA,MACL,CAAC;AAKD,WAAK;AAEL,YAAM,MAAM,KAAK;AACjB,YAAM,MAAc,WAAW,GAAG;AAElC,UAAI,KAAK,KAAK,aAAa,YAAY;AAIvC,UAAI,WAAW;AACf,UAAI,IAAI,SAAS,GAAG;AAChB,mBAAW,IAAI,MAAM,GAAG,EAAE,GAAG;AAGjC,UAAI,IAAI,GAAG,IAAI,EAAE;AAKjB,UAAI,WAAW,CAAC;AAChB,eAAS,WAAW,EAAE;AACtB,eAAS,cAAc,EAAE;AACzB,eAAS,2BAA2B;AACpC,eAAS,2BAA2B;AAKpC,YAAM,YAAY,IAAI,KAAK,aAAa,EAAE,QAAQ,QAAQ;AAG1D,WAAK,YAAY,UAAU,OAAO,GAAG;AAAA,IAEzC;AAAA,EAEJ;",
  "names": []
}
