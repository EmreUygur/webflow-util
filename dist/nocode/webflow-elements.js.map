{
  "version": 3,
  "sources": ["../../src/webflow-core/lightbox.ts", "../../src/webflow-lightbox/caption-handler.ts", "../../src/nocode/webflow-elements.ts"],
  "sourcesContent": ["\n/*\n * webflow-element-lightbox\n * \n * Sygnal Technology Group\n * http://sygnal.com\n * \n * Extensions to Webflow's lightbox element. \n */\n\n\n/** \n * Lightbox class.\n */\n\nvar defaultConfig = {\n}\n\nexport class Sa5Lightbox {\n\n    config; // Optional config\n    _element: HTMLElement;\n\n    constructor(element: HTMLElement, config = {}) {\n\n        this._element = element;\n//        this.config = $.extend({}, defaultConfig, config);\n    \n    }\n\n    init() {\n\n        this.setCaptionToImageAlt(); \n\n    }\n\n    setCaptionToImageAlt() {\n\n        let imgElement = this._element.querySelector(\"img\");\n        let scriptElement = this._element.querySelector(\"script\");\n      \n        // Set the caption to the image alt text\n        if (imgElement && scriptElement) {\n          const imageAltText = imgElement.getAttribute(\"alt\");\n          const imageJSON = JSON.parse(scriptElement.innerHTML);\n      \n          imageJSON.items[0].caption = imageAltText;\n          scriptElement.innerHTML = JSON.stringify(imageJSON);\n      \n          // Apply ref key for caption retrieval\n          imgElement.setAttribute(\"ref-key\", imageJSON.items[0].url);\n        }\n\n        /* \n        const imageAltText = $(lightboxElem).children(\"img\").attr(\"alt\");\n        const script = $(lightboxElem).children(\"script\");\n        const imageJSON = JSON.parse(script.html());\n        imageJSON.items[0].caption = imageAltText;\n        script.html(JSON.stringify(imageJSON));  \n        \n        // Apply ref key for caption retrieval\n        $(lightboxElem).children(\"img\").attr(\"ref-key\", imageJSON.items[0].url);\n*/\n\n    }\n\n}\n\n", "\n/*\n * webflow-lightbox\n * Caption Handler\n * \n * Sygnal Technology Group\n * http://sygnal.com\n * \n * Extensions to Webflow's lightbox element. \n */\n\n\n/** \n * Lightbox class.\n */\n\nvar defaultConfig = {\n}\n\nexport class Sa5LightboxCaptionHandler {\n\n    config; // Optional config\n    lightboxNavObserver;\n\n    constructor() {\n    }\n\n    init() {\n    \n        // Create lightbox state mutation observer\n        let observer = new MutationObserver(this.lightBoxStateCallback);\n        observer.observe(document.getElementsByTagName(\"html\")[0], {\n            childList: false, // observe direct children\n            subtree: false, // and lower descendants too\n            characterDataOldValue: false, // pass old data to callback \n            attributes: true, \n            attributeFilter: [\"class\"]\n        });\n\n    }\n\n    installLightBoxNavObserver() {\n        \n        this.setupCaption();\n\n        let lightboxContainer = document.querySelector(\".w-lightbox-container\");\n\n        if (lightboxContainer) {\n            let lightboxNavObserver = new MutationObserver(this.lightBoxNavCallback);\n\n            // Options for the observer (which mutations to observe)\n            const config = { childList: true, subtree: true };\n\n            // Start observing the target node for configured mutations\n            lightboxNavObserver.observe(lightboxContainer, config);\n        }\n\n    } \n        \n    uninstallLightBoxNavObserver() {\n\n        if (this.lightboxNavObserver)\n            this.lightboxNavObserver.disconnect();\n            \n    }\n    \n    setupCaption() {\n\n        let figure = document.querySelector(\"figure.w-lightbox-figure\");\n\n        if (figure) {\n            let img = figure.querySelector(\"img\");\n            let captionElement = figure.querySelector(\"figcaption\");\n        \n            if (img) {\n                let key = img.getAttribute(\"src\");\n                let thumb = document.querySelector(`img[ref-key='${key}']`);\n            \n                if (captionElement) {\n                    // Remove existing figcaption\n                    captionElement.remove();\n                }\n            \n                if (thumb) {\n                    let caption = thumb.getAttribute(\"alt\");\n                    \n                    if (caption) {\n                        // Append new figcaption\n                        let newCaption = document.createElement(\"figcaption\");\n                        newCaption.textContent = caption;\n                        newCaption.classList.add(\"w-lightbox-caption\");\n                        figure.appendChild(newCaption);\n                    }\n                }\n            }\n        }\n                \n    }\n\n    lightBoxStateCallback = (mutationList: MutationRecord[], observer: MutationObserver) => {\n\n        for (const mutation of mutationList) {\n            if (mutation.type === 'attributes' && mutation.target instanceof HTMLElement) {\n                if (mutation.target.classList.contains(\"w-lightbox-noscroll\")) {\n                    console.debug(\"Lightbox opened.\");\n                    this.installLightBoxNavObserver();\n                } else {\n                    console.debug(\"Lightbox closed.\");\n                    this.uninstallLightBoxNavObserver();\n                }\n            }\n        }\n\n    };\n\n    lightBoxNavCallback = (mutationList: MutationRecord[], observer: MutationObserver) => {\n        for (let mutation of mutationList) {\n            if (mutation.target instanceof HTMLElement) {\n                if (mutation.target.classList.contains(\"w-lightbox-content\")) {\n                    this.setupCaption();\n                }\n            }\n        }\n    }\n\n}\n\n", "\n/*\n * webflow-elements\n * Lightbox\n * \n * Sygnal Technology Group\n * http://sygnal.com\n * \n * NO-CODE version.\n */\n\n\nimport { Sa5Lightbox } from '../webflow-core/lightbox';\nimport { Sa5LightboxCaptionHandler } from '../webflow-lightbox/caption-handler';\n\n\nconst init = () => { \n\n    /**\n     * Init lightbox captions \n     */\n\n    let useLightboxCaptionHandler = false;\n\n    const elements = document.querySelectorAll('[wfu-lightbox-captions]') as NodeListOf<HTMLElement>; \n    useLightboxCaptionHandler = elements.length > 0;\n    elements.forEach((element) => { \n\n        // Do something with each element\n        const wfuLightbox = new Sa5Lightbox(element).init();\n\n    });\n\n    if(useLightboxCaptionHandler) {\n        new Sa5LightboxCaptionHandler().init(); \n    }\n\n    /**\n     * Init lightbox CMS groups\n     */\n\n    let lightBoxCmsGroups = false;\n\n    const groups = document.querySelectorAll('[wfu-lightbox-group]') as NodeListOf<HTMLElement>; \n    lightBoxCmsGroups = groups.length > 0;\n    groups.forEach((element) => { \n\n        // Get the value of the wfu-lightbox-group attribute\n        let groupValue = element.getAttribute(\"wfu-lightbox-group\");\n\n        // Find all descendant script elements with the class .w-json\n        let scripts = element.querySelectorAll(\"script.w-json\");\n\n        // For each script\n        scripts.forEach((script) => {\n        // Parse the JSON\n        let json = JSON.parse(script.textContent);\n\n        // Update the group value\n        json.group = groupValue;\n\n        // Convert the JSON back to a string and update the script's content\n        script.textContent = JSON.stringify(json, null, 2);\n        });\n\n    });\n\n    // Re-initialize lightbox\n    // to pick up new group names\n    if(lightBoxCmsGroups) {\n        var Webflow = Webflow || [];\n        Webflow.push(function () {\n            Webflow.require(\"lightbox\").ready();\n        });\n    }\n    \n}\n  \ndocument.addEventListener(\"DOMContentLoaded\", init)\n  \n\n\n\n\n"],
  "mappings": "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",
  "names": []
}
