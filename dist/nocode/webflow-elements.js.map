{
  "version": 3,
  "sources": ["../../src/webflow-core/lightbox.ts", "../../src/nocode/webflow-elements.ts"],
  "sourcesContent": ["\n/*\n * webflow-element-lightbox\n * \n * Sygnal Technology Group\n * http://sygnal.com\n * \n * Extensions to Webflow's lightbox element. \n */\n\n\n/*\n * Elements class.\n */\n\nvar defaultConfig = {\n\n    // sessionStorage | localStorage | cookies\n//    method: 'sessionStorage',\n    \n//    prefix: 'track' \n\n}\n\nexport class WfuLightbox {\n\n    config; // Optional config\n    _element: HTMLElement;\n\n    constructor(element: HTMLElement, config = {}) {\n\n        this._element = element;\n//        this.config = $.extend({}, defaultConfig, config);\n    \n    }\n\n    init() {\n\n        let imgElement = this._element.querySelector(\"img\");\n        let scriptElement = this._element.querySelector(\"script\");\n      \n        if (imgElement && scriptElement) {\n          const imageAltText = imgElement.getAttribute(\"alt\");\n          const imageJSON = JSON.parse(scriptElement.innerHTML);\n      \n          imageJSON.items[0].caption = imageAltText;\n          scriptElement.innerHTML = JSON.stringify(imageJSON);\n      \n          // Apply ref key for caption retrieval\n          imgElement.setAttribute(\"ref-key\", imageJSON.items[0].url);\n        }\n\n        /* \n        const imageAltText = $(lightboxElem).children(\"img\").attr(\"alt\");\n        const script = $(lightboxElem).children(\"script\");\n        const imageJSON = JSON.parse(script.html());\n        imageJSON.items[0].caption = imageAltText;\n        script.html(JSON.stringify(imageJSON));  \n        \n        // Apply ref key for caption retrieval\n        $(lightboxElem).children(\"img\").attr(\"ref-key\", imageJSON.items[0].url);\n*/\n\n    }\n\n}\n\n", "\n/*\n * webflow-elements\n * \n * Sygnal Technology Group\n * http://sygnal.com\n * \n * NO-CODE version.\n */\n\n\nimport { WfuLightbox } from '../webflow-core/lightbox';\n\n\n\nconst init = () => { \n \n\n    // Show all elements tagged for logged-in users only\n\n    const elements = document.querySelectorAll('[wfu-lightbox-captions]') as NodeListOf<HTMLElement>; \n    elements.forEach((element) => { \n\n      // Do something with each element\n      const wfuLightbox = new WfuLightbox(element).init();\n\n    });\n    \n    let observer = new MutationObserver(lightBoxStateCallback);\n    observer.observe(document.getElementsByTagName(\"html\")[0], {\n        childList: false, // observe direct children\n        subtree: false, // and lower descendants too\n        characterDataOldValue: false, // pass old data to callback \n        attributes: true, \n        attributeFilter: [\"class\"]\n    });\n\n}\n  \ndocument.addEventListener(\"DOMContentLoaded\", init)\n\nconst lightBoxStateCallback = (mutationList: MutationRecord[], observer: MutationObserver) => {\n    for (const mutation of mutationList) {\n        if (mutation.type === 'attributes' && mutation.target instanceof HTMLElement) {\n            if (mutation.target.classList.contains(\"w-lightbox-noscroll\")) {\n                console.debug(\"Lightbox opened.\");\n                installLightBoxNavObserver();\n            } else {\n                console.debug(\"Lightbox closed.\");\n                uninstallLightBoxNavObserver();\n            }\n        }\n    }\n};\n\n/* \nconst lightBoxStateCallback = (mutationList, observer) => {\n    for (const mutation of mutationList) {\n        if (mutation.type === 'attributes') {\n        \n            if ($(\"html\").hasClass(\"w-lightbox-noscroll\")) {\n                console.debug(\"Lightbox opened.\");\n                installLightBoxNavObserver();\n            } else {\n                console.debug(\"Lightbox closed.\"); \n                uninstallLightBoxNavObserver();\n            }\n            \n        }\n    }\n};\n*/\n  \nvar lightboxNavObserver;\n  \nfunction setupCaption() {\n  \n    /*\n    const figure = $(\"figure.w-lightbox-figure\");\n    const img = figure.children(\"img\");\n    const key = img.attr(\"src\");\n    const thumb = $(`img[ref-key='${key}'`); \n    const caption = thumb.attr(\"alt\");\n    \n    figure.children(\"figcaption\").remove();\n    \n    if (caption)\n        figure.append(\n            $(`<figcaption class=\"w-lightbox-caption\">${caption}</figcaption>`)\n            );\n */ \n\n    let figure = document.querySelector(\"figure.w-lightbox-figure\");\n\n    if (figure) {\n        let img = figure.querySelector(\"img\");\n        let captionElement = figure.querySelector(\"figcaption\");\n    \n        if (img) {\n        let key = img.getAttribute(\"src\");\n        let thumb = document.querySelector(`img[ref-key='${key}']`);\n    \n        if (captionElement) {\n            // Remove existing figcaption\n            captionElement.remove();\n        }\n    \n        if (thumb) {\n            let caption = thumb.getAttribute(\"alt\");\n            \n            if (caption) {\n            // Append new figcaption\n            let newCaption = document.createElement(\"figcaption\");\n            newCaption.textContent = caption;\n            newCaption.classList.add(\"w-lightbox-caption\");\n            figure.appendChild(newCaption);\n            }\n        }\n        }\n    }\n            \n            \n\n}\n  \nfunction uninstallLightBoxNavObserver() {\n    if (lightboxNavObserver)\n        lightboxNavObserver.disconnect();\n}\n  \nfunction installLightBoxNavObserver() {\n    \n    setupCaption();\n\n    let lightboxContainer = document.querySelector(\".w-lightbox-container\");\n\n    if (lightboxContainer) {\n        let lightboxNavObserver = new MutationObserver(lightBoxNavCallback);\n\n        // Options for the observer (which mutations to observe)\n        const config = { childList: true, subtree: true };\n\n        // Start observing the target node for configured mutations\n        lightboxNavObserver.observe(lightboxContainer, config);\n    }\n\n/* \n    lightboxNavObserver = new MutationObserver(lightBoxNavCallback);\n    lightboxNavObserver.observe($(\".w-lightbox-container\")[0], {\n        childList: true, // observe direct children\n        subtree: true // and lower descendants too\n    });\n    */\n} \n\n\nconst lightBoxNavCallback = (mutationList: MutationRecord[], observer: MutationObserver) => {\n    for (let mutation of mutationList) {\n        if (mutation.target instanceof HTMLElement) {\n            if (mutation.target.classList.contains(\"w-lightbox-content\")) {\n                setupCaption();\n            }\n        }\n    }\n};\n\n/* \nconst lightBoxNavCallback = (mutationList, observer) => {\n    for (let mutation of mutationList) {\n  \n        // if ($(mutation.target).hasClass(\"w-lightbox-view\")) { \n        //     $(mutation.target).children(\"figcaption\").remove();\n        // }\n\n        if ($(mutation.target).hasClass(\"w-lightbox-content\")) { \n            setupCaption(); \n        }\n    }\n    \n};\n*/"],
  "mappings": ";;AAwBO,MAAM,cAAN,MAAkB;AAAA,IAKrB,YAAY,SAAsB,SAAS,CAAC,GAAG;AAE3C,WAAK,WAAW;AAAA,IAGpB;AAAA,IAEA,OAAO;AAEH,UAAI,aAAa,KAAK,SAAS,cAAc,KAAK;AAClD,UAAI,gBAAgB,KAAK,SAAS,cAAc,QAAQ;AAExD,UAAI,cAAc,eAAe;AAC/B,cAAM,eAAe,WAAW,aAAa,KAAK;AAClD,cAAM,YAAY,KAAK,MAAM,cAAc,SAAS;AAEpD,kBAAU,MAAM,GAAG,UAAU;AAC7B,sBAAc,YAAY,KAAK,UAAU,SAAS;AAGlD,mBAAW,aAAa,WAAW,UAAU,MAAM,GAAG,GAAG;AAAA,MAC3D;AAAA,IAaJ;AAAA,EAEJ;;;AClDA,MAAM,OAAO,MAAM;AAKf,UAAM,WAAW,SAAS,iBAAiB,yBAAyB;AACpE,aAAS,QAAQ,CAAC,YAAY;AAG5B,YAAM,cAAc,IAAI,YAAY,OAAO,EAAE,KAAK;AAAA,IAEpD,CAAC;AAED,QAAI,WAAW,IAAI,iBAAiB,qBAAqB;AACzD,aAAS,QAAQ,SAAS,qBAAqB,MAAM,EAAE,IAAI;AAAA,MACvD,WAAW;AAAA,MACX,SAAS;AAAA,MACT,uBAAuB;AAAA,MACvB,YAAY;AAAA,MACZ,iBAAiB,CAAC,OAAO;AAAA,IAC7B,CAAC;AAAA,EAEL;AAEA,WAAS,iBAAiB,oBAAoB,IAAI;AAElD,MAAM,wBAAwB,CAAC,cAAgC,aAA+B;AAC1F,eAAW,YAAY,cAAc;AACjC,UAAI,SAAS,SAAS,gBAAgB,SAAS,kBAAkB,aAAa;AAC1E,YAAI,SAAS,OAAO,UAAU,SAAS,qBAAqB,GAAG;AAC3D,kBAAQ,MAAM,kBAAkB;AAChC,qCAA2B;AAAA,QAC/B,OAAO;AACH,kBAAQ,MAAM,kBAAkB;AAChC,uCAA6B;AAAA,QACjC;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAoBA,MAAI;AAEJ,WAAS,eAAe;AAiBpB,QAAI,SAAS,SAAS,cAAc,0BAA0B;AAE9D,QAAI,QAAQ;AACR,UAAI,MAAM,OAAO,cAAc,KAAK;AACpC,UAAI,iBAAiB,OAAO,cAAc,YAAY;AAEtD,UAAI,KAAK;AACT,YAAI,MAAM,IAAI,aAAa,KAAK;AAChC,YAAI,QAAQ,SAAS,cAAc,gBAAgB,OAAO;AAE1D,YAAI,gBAAgB;AAEhB,yBAAe,OAAO;AAAA,QAC1B;AAEA,YAAI,OAAO;AACP,cAAI,UAAU,MAAM,aAAa,KAAK;AAEtC,cAAI,SAAS;AAEb,gBAAI,aAAa,SAAS,cAAc,YAAY;AACpD,uBAAW,cAAc;AACzB,uBAAW,UAAU,IAAI,oBAAoB;AAC7C,mBAAO,YAAY,UAAU;AAAA,UAC7B;AAAA,QACJ;AAAA,MACA;AAAA,IACJ;AAAA,EAIJ;AAEA,WAAS,+BAA+B;AACpC,QAAI;AACA,0BAAoB,WAAW;AAAA,EACvC;AAEA,WAAS,6BAA6B;AAElC,iBAAa;AAEb,QAAI,oBAAoB,SAAS,cAAc,uBAAuB;AAEtE,QAAI,mBAAmB;AACnB,UAAIA,uBAAsB,IAAI,iBAAiB,mBAAmB;AAGlE,YAAM,SAAS,EAAE,WAAW,MAAM,SAAS,KAAK;AAGhD,MAAAA,qBAAoB,QAAQ,mBAAmB,MAAM;AAAA,IACzD;AAAA,EASJ;AAGA,MAAM,sBAAsB,CAAC,cAAgC,aAA+B;AACxF,aAAS,YAAY,cAAc;AAC/B,UAAI,SAAS,kBAAkB,aAAa;AACxC,YAAI,SAAS,OAAO,UAAU,SAAS,oBAAoB,GAAG;AAC1D,uBAAa;AAAA,QACjB;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;",
  "names": ["lightboxNavObserver"]
}
