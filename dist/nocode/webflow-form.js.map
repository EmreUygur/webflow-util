{
  "version": 3,
  "sources": ["../../src/webflow-core/debug.ts", "../../src/webflow-core.ts", "../../src/webflow-form.ts", "../../src/webflow-form/ip-info.ts", "../../src/nocode/webflow-form.ts"],
  "sourcesContent": ["\n/*\n * webflow-core\n * \n * Sygnal Technology Group\n * http://sygnal.com\n * \n * Debug Utilities\n */\n\n\n\nexport class Sa5Debug {\n    \n    private localStorageDebugFlag: string = 'sa5-debug';\n\n    private _enabled: boolean = false;\n    private _label: string;\n\n    // Get or set WFU persistent debug state\n    // which is stored in localStorage. \n    get persistentDebug(): boolean {\n        return Boolean(localStorage.getItem(this.localStorageDebugFlag)); \n    }\n    set persistentDebug(active: boolean) {\n        if (active) {\n            localStorage.setItem(this.localStorageDebugFlag, \"true\");\n            console.debug (\"sa5-core debug enabled (persistent).\");\n        } else {\n            localStorage.removeItem(this.localStorageDebugFlag); \n            console.debug (\"sa5-core debug disabled (persistent).\");\n        }\n    }\n\n    // Enable/disable debugging \n    get enabled(): boolean {\n\n        // localStorage is checked for a debug flag, to enable remote debug enabling \n        // Any non-null string value will resolve to TRUE here, including the string \"false\" \n        var wfuDebugValue = Boolean(localStorage.getItem(this.localStorageDebugFlag)); \n\n        // Or this with the current debug state\n        // If either is enabled, debugging is on \n        wfuDebugValue = wfuDebugValue || this._enabled; \n\n        return wfuDebugValue;\n    }\n    set enabled(active: boolean) {\n        this._enabled = active;\n    }\n\n\n    // Initialize\n    constructor(label: string) {\n\n        // Save the label, for console logging\n        this._label = label;\n\n    }\n\n\n    // Start a console log group\n    group(name) {\n        if (this.enabled)\n            console.group(name);\n    }\n\n    // End a console log group\n    groupEnd() {\n        if (this.enabled)\n            console.groupEnd();\n    }\n\n    // Log debug data to the console\n    debug(...args: any[]): void {\n\n        if (this.enabled)\n            // Unlimited arguments in a JavaScript function\n            // https://stackoverflow.com/a/6396066\n            console.debug(this._label, ...args); \n            \n    }\n\n}\n\n\n", "\n/*\n * webflow-core\n * \n * Sygnal Technology Group\n * http://sygnal.com\n * \n * Core Utilities\n */\n\n\n\n// export interface Sa5Handler {\n//     [0]: string;\n//     [1]: Function;\n// }\n\n\n// import { HtmlBuilder } from './modules/webflow-html-builder';\nimport { Sa5Debug } from './webflow-core/debug'\n\n/*\n * Debugging class.\n */\n\nexport class Sa5Core {\n\n    public handlers = [];\n\n    // Map for elements wired to Sa5 objects \n//    public elements: WeakMap<HTMLElement, object>;\n//     map.set(elem, myObject);\n\n// // Later, you can retrieve the object like this\n// let retrievedObject = map.get(elem);\n\n    constructor() {\n//        this.elements = new WeakMap<HTMLElement, object>();\n    }\n\n    init() {\n\n\n        this.initDebugMode();\n\n    }\n\n    // Auto-enable debug\n    // based on ?sa-debug=true querystring param\n    initDebugMode() {\n\n        const debugParamKey = 'sa-debug'; // ?sa-debug=true\n\n//        var wfuDebugValue = Boolean(localStorage.setItem('wfuDebug', 'true')); \n\n        let params = new URLSearchParams(window.location.search);\n        let hasDebug = params.has(debugParamKey);\n\n        if (hasDebug) {\n            let wfuDebug = new Sa5Debug(`sa5 init`);\n            wfuDebug.persistentDebug = this.stringToBoolean(params.get(debugParamKey));\n        }\n\n    }\n\n    stringToBoolean(str: string): boolean {\n        const truthyValues: string[] = ['1', 'true', 'yes'];\n        const falsyValues: string[] = ['0', 'false', 'no'];\n      \n        if (truthyValues.indexOf(str.toLowerCase()) !== -1) {\n            return true;\n        // } else if (falsyValues.indexOf(str.toLowerCase()) !== -1) {\n        //     return false;\n        } else {\n            return false;\n        }\n    }\n\n    static startup(module: any | null = null) {\n\n//        console.debug(\"sa5core\", \"startup\");\n\n//        console.debug(\"INITIALIZING SA5CORE\");\n//        console.log(window[\"sa5\"]);\n        \n        let sa5instance = window['sa5'];\n\n        // Initialize Sa5Core if needed\n        if(!(sa5instance?.constructor?.name == \"Sa5Core\")) {\n\n    //         if(window[\"sa5\"])\n    // console.log(\"name\", window[\"sa5\"].name);\n\n            var core = new Sa5Core();\n\n            // Absorb handlers\n            if(Array.isArray(sa5instance))\n                core.handlers = window[\"sa5\"];\n\n            window[\"sa5\"] = core;\n            window[\"Sa5\"] = window[\"sa5\"];\n//            console.log(\"post\", window[\"sa5\"] instanceof Sa5Core);\n\n        } \n\n        // Add new module\n        //window[\"sa5\"] = window[\"sa5\"] || []; // {};\n        if (module) {\n\n//            console.debug(\"Registered module\", module.name); \n\n            window[\"sa5\"][module.name] = module;\n//            console.log(window[\"sa5\"][module.name]);\n        }\n\n        // instance.constructor.name\n\n    }\n\n    // Add new handlers\n    push(o) {\n        this.handlers.push(o);\n    }\n\n}\n\n\n\nSa5Core.startup();\n// Register\n//window[\"sa5\"] = window[\"sa5\"] || []; // {};\n//window[\"sa5\"][\"Sa5Core\"] = Sa5Core;\n", "\n/*\n * webflow-form\n * \n * Sygnal Technology Group\n * http://sygnal.com\n * \n * Adds capabilities to Webflow Forms and form elements.\n */\n\nimport { Sa5Core } from './webflow-core';\nimport { Sa5Debug } from './webflow-core/debug';\n\n\n\nexport enum WebflowFormMode {\n    Active = 0,\n    Success = 1,\n    Error = 2\n}\n\n\nexport class Sa5Form {\n//    private _element: HTMLElement;\n\n    debug: Sa5Debug;\n\n    formBlockElement: HTMLElement;\n    formElement: HTMLFormElement;\n\n    isValid: boolean;\n\n    constructor(element: HTMLElement) {\n//        this._element = element;\n\n        let debug = new Sa5Debug(\"sa5-form\");\n        debug.debug (\"Initializing\");\n\n        // Resolve Form Block pointer\n        if (element.tagName == \"FORM\")\n            this.formBlockElement = element.parentElement;\n        else\n            this.formBlockElement = element;\n        console.debug(this.formBlockElement);\n\n        // Resolve Form pointer\n        this.formElement = this.formBlockElement.querySelector(\"form\");\n\n        // TODO: everywhere \n        this.isValid = true; \n\n        console.debug(this.formElement);\n\n    }\n\n    init() {\n\n\n    }\n\n    // es6 call class methods from within same class\n    // https://stackoverflow.com/a/36248405\n\n    setMode(mode: WebflowFormMode, message = \"\") {\n\n        this.debug.debug(\"setting form mode.\");\n\n        let success = this.formBlockElement.querySelector(\"div.w-form-done\") as HTMLElement;\n        let error = this.formBlockElement.querySelector(\"div.w-form-fail\") as HTMLElement;\n\n        switch (mode) {\n            case WebflowFormMode.Active:\n                this.debug.debug(\"Change Webflow form mode to active.\");\n                \n                this.formElement.style.display = \"block\";\n                success.style.display = \"none\";\n                error.style.display = \"none\";\n                \n                break;\n            case WebflowFormMode.Success:\n\n                this.debug.debug(\"Change Webflow form mode to success (done).\");\n                \n                success.querySelector(\"[wfu-form-message]\").innerHTML = message;\n\n                this.formElement.style.display = \"none\";\n                success.style.display = \"block\";\n                error.style.display = \"none\";\n\n                break;\n            case WebflowFormMode.Error:\n\n                this.debug.debug(\"Change Webflow form mode to error.\");\n                \n                error.querySelector(\"[wfu-form-message]\").innerHTML = message;\n                \n                this.formElement.style.display = \"none\";\n                success.style.display = \"none\";\n                error.style.display = \"block\";\n\n                break;\n        }\n\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n", "\n/*\n * webflow-form-ipinfo\n * \n * Sygnal Technology Group\n * http://sygnal.com\n * \n * For capturing sender IP info,\n * and appending to a form.\n */\n\nimport { Sa5Form } from \"../webflow-form\";\n\nexport class Sa5FormIPInfo {\n\n    formBlock;\n    form: Sa5Form;\n\n    config; // Optional config\n\n    handler;\n\n    prefix = \"ip\";\n\n    constructor(form: Sa5Form, config = {}) {\n\n        this.handler = this;\n\n        this.form = form;\n\n        this.config = config;\n\n        // Resolve Form Block pointer \n        // if ($(elem).is(\"form\"))\n        //     this.formBlock = $(elem).parent();\n        // else\n        //     this.formBlock = $(elem);\n        // console.debug(this.formBlock);\n\n        // // Resolve Form pointer\n        // this.form = this.formBlock.children(\"form\");\n        // console.debug(this.form);\n\n    }\n\n\n    init(): void {\n\n        const handler = this.handler;\n    \n        console.debug(\"WFU append IP Info to form.\");\n    \n        // Get GeoIP info and append in hidden fields \n        fetch(\"https://get.geojs.io/v1/ip/geo.json\")\n            .then(response => response.json())\n            .then(data => {\n                const fields = ['address', 'country', 'country-code', 'region', 'city', 'timezone', 'latitude', 'longitude'];\n                fields.forEach(field => {\n                    let input = document.createElement('input');\n                    input.type = 'hidden';\n                    input.name = `${handler.prefix}-${field}`;\n                    input.value = data[field];\n                    this.form.formElement.appendChild(input);\n                });\n            })\n            .catch(error => console.error('Error:', error));\n    }\n\n    static createFromElement(elem: HTMLElement) {\n\n        let form: Sa5Form = new Sa5Form(elem);\n\n        // if form is valid\n        if (!form.isValid) {\n            console.error(\"Cannot only instantiate IP Info from a Form element.\"); \n        }\n\n        return new Sa5FormIPInfo(form); \n\n    }\n\n    // appendIPInfo() {\n\n    //     const handler = this.handler;\n    //     const form = this.form;\n\n    //     console.debug(\"WFU append IP Info to form.\");\n\n    //     // Get GeoIP info\n    //     // and append in hidden fields \n    //     $.getJSON(\n    //         \"https://get.geojs.io/v1/ip/geo.json\",\n    //         function (data) {\n\n    //         $('<input>').attr({\n    //             type: 'hidden',\n    //             name: `${handler.prefix}-address`,\n    //             value: data.ip\n    //         }).appendTo(form);\n\n    //         $('<input>').attr({\n    //             type: 'hidden',\n    //             name: `${handler.prefix}-country`,\n    //             value: data.country\n    //         }).appendTo(form);\n\n    //         $('<input>').attr({\n    //             type: 'hidden',\n    //             name: `${handler.prefix}-country-code`,\n    //             value: data.country_code\n    //         }).appendTo(form);\n\n    //         $('<input>').attr({\n    //             type: 'hidden',\n    //             name: `${handler.prefix}-region`,\n    //             value: data.region\n    //         }).appendTo(form);\n\n    //         $('<input>').attr({\n    //             type: 'hidden',\n    //             name: `${handler.prefix}-city`,\n    //             value: data.city\n    //         }).appendTo(form);\n\n    //         $('<input>').attr({\n    //             type: 'hidden',\n    //             name: `${handler.prefix}-timezone`,\n    //             value: data.timezone\n    //         }).appendTo(form);\n\n    //         $('<input>').attr({\n    //             type: 'hidden',\n    //             name: `${handler.prefix}-latitude`,\n    //             value: data.latitude\n    //         }).appendTo(form);\n\n    //         $('<input>').attr({\n    //             type: 'hidden',\n    //             name: `${handler.prefix}-longitude`,\n    //             value: data.longitude\n    //         }).appendTo(form);\n\n    //     });\n\n    // }\n\n}\n", "\n/*\n * webflow-form\n * \n * Sygnal Technology Group\n * http://sygnal.com\n * \n * NO-CODE version, keys off of [wfu] attributes.\n */\n\nimport { Sa5Core } from '../webflow-core';\nimport { Sa5Debug } from '../webflow-core/debug';\n\nimport { Sa5Form } from '../webflow-form';\nimport { WfuFormHandler } from '../webflow-form/handler/form-handler'; \nimport { Sa5FormIPInfo } from '../webflow-form/ip-info';\n\nconst init = () => { \n\n    new Sa5Core().init();\n\n    // Initialize debugging\n    let debug = new Sa5Debug(\"sa5-form\");\n    debug.debug (\"Initializing\");\n\n    // const sa5Hotkeys = new Sa5Hotkeys();\n    // sa5Hotkeys.init();\n\n\n    // Prepare any tagged forms by appending IP Info\n    document.querySelectorAll('[wfu-form-ipinfo]')\n      .forEach((element: HTMLElement) => {\n//        console.log(\"test ip-info\"); \n\n        Sa5FormIPInfo.createFromElement(element)\n            .init();\n\n    });\n\n    // Catch any submits on forms\n    // Which post to Zapier-webhooks \n    document.querySelectorAll('[wfu-form-handler]')\n      .forEach((element: HTMLElement) => {\n\n        Sa5FormIPInfo.createFromElement(element)\n            .init();\n\n\n        // (new WfuFormIPInfo(element))\n        //     .appendIPInfo();\n\n        // const handlerName = element.getAttribute(\"wfu-form-handler\");\n        // var handler;\n\n        // handler = WfuFormHandlerFactory\n        //     .create(handlerName, element);\n\n    });\n\n/* \n    dataBindAllForms(db) {\n\n        // Create datalists from all data sources\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach\n        db.data.forEach((data, dataSourceName) => {\n\n            // Create HTML datalists of all data sources\n            // for data binding\n            createHtmlDataList(\n                createDsnMoniker(dataSourceName), // creates a more unique name to avoid element ID conflicts\n                data\n            );\n        });\n\n        // Bind all SELECTS with [wfu-bind] specified\n        dataBindAllFormSelects(db);\n\n        // Bind all INPUTS with [wfu-bind] specified\n        dataBindAllFormInputs(db);\n\n    }\n*/\n\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", init)\n\n\n"],
  "mappings": "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",
  "names": []
}
