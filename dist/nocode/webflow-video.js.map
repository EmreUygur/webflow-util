{
  "version": 3,
  "sources": ["../../src/webflow-video.ts", "../../src/webflow-core.ts", "../../src/nocode/webflow-video.ts"],
  "sourcesContent": ["\n/*\n * webflow-video\n * \n * Sygnal Technology Group\n * http://sygnal.com\n * \n * Webflow Video\n */\n\n\n\nexport class WebflowVideo {\n\n    // Initialize\n    constructor() {\n    }\n\n    // Fix all data poster urls\n    processAllDataPosterUrls (): void {\n\n        // Find poster video overrides and apply them\n        const elements = document.querySelectorAll(`div[wfu-data-poster-url]`);\n        elements.forEach((element) => {\n\n            element.setAttribute(\n                \"data-poster-url\",\n                element.getAttribute(\"wfu-data-poster-url\")\n            );\n\n        });\n\n    }\n\n}\n\n\n\n", "\n/*\n * webflow-core\n * \n * Sygnal Technology Group\n * http://sygnal.com\n * \n * Core Utilities\n */\n\n\n\n/*\n * Debugging class.\n */\n\nexport class WfuDebug {\n    \n    private _enabled: boolean = false;\n    private _label: string;\n\n    // Enable/disable debugging \n    get enabled(): boolean {\n\n        // localStorage is checked for a debug flag, to enable remote debug enabling \n        // Any non-null string value will resolve to TRUE here, including the string \"false\" \n        var wfuDebugValue = Boolean(localStorage.getItem('wfuDebug')); \n\n        // Or this with the current debug state\n        // If either is enabled, debugging is on \n        wfuDebugValue = wfuDebugValue || this._enabled; \n\n        return wfuDebugValue;\n    }\n    set enabled(active: boolean) {\n        this._enabled = active;\n    }\n\n    // Initialize\n    constructor(label: string) {\n\n        // Save the label, for console logging\n        this._label = label;\n\n    }\n\n    // Start a console log group\n    group(name) {\n        if (this.enabled)\n            console.group(name);\n    }\n\n    // End a console log group\n    groupEnd() {\n        if (this.enabled)\n            console.groupEnd();\n    }\n\n    // Log debug data to the console\n    debug(...args: any[]): void {\n\n        if (this.enabled)\n            // Unlimited arguments in a JavaScript function\n            // https://stackoverflow.com/a/6396066\n            console.debug(this._label, ...args); \n            \n    }\n\n}\n\n\n", "\n/*\n * webflow-video\n * \n * Sygnal Technology Group\n * http://sygnal.com\n * \n * NO-CODE version, keys off of [wfu] attributes.\n */\n\nimport { WebflowVideo } from '../webflow-video';\nimport { WfuDebug } from '../webflow-core.js';\n\nconst init = () => { \n\n    // Initialize debugging\n    let debug = new WfuDebug(\"wfu-video\");\n    debug.debug (\"Initializing\");\n\n    const webflowVideo = new WebflowVideo();\n\n    webflowVideo.processAllDataPosterUrls();\n\n    // // Find poster video overrides and apply them\n    // const elements = document.querySelectorAll(`div[wfu-data-poster-url]`) as NodeListOf<HTMLDivElement>; \n    // elements.forEach((element) => { \n\n    //   // Do something with each element\n    //   webflowInfo.updateHrefToWebflowPreviewLink(element);\n\n    // });\n\n}\n  \ndocument.addEventListener(\"DOMContentLoaded\", init)"],
  "mappings": ";;AAYO,MAAM,eAAN,MAAmB;AAAA,IAGtB,cAAc;AAAA,IACd;AAAA,IAGA,2BAAkC;AAG9B,YAAM,WAAW,SAAS,iBAAiB,0BAA0B;AACrE,eAAS,QAAQ,CAAC,YAAY;AAE1B,gBAAQ;AAAA,UACJ;AAAA,UACA,QAAQ,aAAa,qBAAqB;AAAA,QAC9C;AAAA,MAEJ,CAAC;AAAA,IAEL;AAAA,EAEJ;;;AClBO,MAAM,WAAN,MAAe;AAAA,IAuBlB,YAAY,OAAe;AArB3B,WAAQ,WAAoB;AAwBxB,WAAK,SAAS;AAAA,IAElB;AAAA,IAtBA,IAAI,UAAmB;AAInB,UAAI,gBAAgB,QAAQ,aAAa,QAAQ,UAAU,CAAC;AAI5D,sBAAgB,iBAAiB,KAAK;AAEtC,aAAO;AAAA,IACX;AAAA,IACA,IAAI,QAAQ,QAAiB;AACzB,WAAK,WAAW;AAAA,IACpB;AAAA,IAWA,MAAM,MAAM;AACR,UAAI,KAAK;AACL,gBAAQ,MAAM,IAAI;AAAA,IAC1B;AAAA,IAGA,WAAW;AACP,UAAI,KAAK;AACL,gBAAQ,SAAS;AAAA,IACzB;AAAA,IAGA,SAAS,MAAmB;AAExB,UAAI,KAAK;AAGL,gBAAQ,MAAM,KAAK,QAAQ,GAAG,IAAI;AAAA,IAE1C;AAAA,EAEJ;;;ACvDA,MAAM,OAAO,MAAM;AAGf,QAAI,QAAQ,IAAI,SAAS,WAAW;AACpC,UAAM,MAAO,cAAc;AAE3B,UAAM,eAAe,IAAI,aAAa;AAEtC,iBAAa,yBAAyB;AAAA,EAW1C;AAEA,WAAS,iBAAiB,oBAAoB,IAAI;",
  "names": []
}
