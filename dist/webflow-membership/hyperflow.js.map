{
  "version": 3,
  "sources": ["../../src/webflow-membership/hyperflow.ts"],
  "sourcesContent": ["\r\n/*\r\n * SA5 \r\n * webflow-membership\r\n * Hyperflow\r\n * \r\n * Sygnal Technology Group\r\n * http://sygnal.com\r\n * \r\n * User Account Information Utilities\r\n */\r\n\r\n// import { XXH64 } from '../webflow-crypto';\r\n// import { toTitleCase, getCookie } from '../utils';\r\n//import { WfuDebug } from './webflow-core.js';\r\n\r\nimport { Sa5Core } from '../webflow-core';\r\nimport { Sa5Debug } from '../webflow-core/debug';\r\nimport { Sa5UserAccounts } from '../webflow-membership';\r\nimport { Sa5User } from './user';\r\n\r\n    \r\n\r\n\r\n/*\r\n * Access Groups class.\r\n */\r\n\r\n//import Md5 from \"crypto-api/src/hasher/md5\"; \r\nexport class Sa5UserHyperflow {\r\n\r\n    membership: Sa5UserAccounts;\r\n    accessGroups: string[] = [];\r\n\r\n    constructor(membership: Sa5UserAccounts) {\r\n        this.membership = membership; \r\n    }\r\n\r\n    async initAsync() { \r\n\r\nconsole.log(\"initAsync\"); \r\n\r\n        // Determine access group access\r\n        console.log(await this.getCurrentUserAsync());\r\n  \r\n        // Iterate and check\r\n\r\n        // this.hasAccessGroup(\"webflow\");\r\n        // this.hasAccessGroup(\"client\");\r\n    }\r\n\r\n    async getCurrentUserAsync() {\r\n\r\n//        this.accessGroups = []; // Object.create(null); \r\n        // this.accessGroups.push({ key: \"webflow\", access: false });\r\n        // this.accessGroups.push({ key: \"webflow-2\", access: false });\r\n        // this.accessGroups.push({ key: \"client\", access: false });\r\n\r\n\r\n\r\n        const response = await fetch(\r\n          `${this.membership.config.hf.currentUserUrl}`\r\n          );\r\n//      console.log(`redirected: ${response.redirected}`);\r\n    \r\n      console.log('STATUS:', response.status); \r\n      \r\n      const raw = await response.json(); \r\n\r\n      console.log(raw); \r\n\r\n\r\n\r\n// Parse this Puppy\r\n/*\r\n{\r\n  id: \"658d2c967a397cda826ac938\",\r\n  createdOn: \"2023-12-28T08:06:46.759Z\",\r\n  lastUpdated: \"2023-12-28T21:58:28.281Z\",\r\n  isEmailVerified: true,\r\n  lastLogin: \"2023-12-28T08:07:35.407Z\",\r\n  data: {\r\n    country: null,\r\n    city: null,\r\n    webflow-micro-consulting: false,\r\n    webflow-mc-account: null,\r\n    wmc-map-url: null,\r\n    bio: null,\r\n    name: \"Michael\",\r\n    email: \"memetican@gmail.com\",\r\n    accept-communications: true,\r\n    accept-privacy: true\r\n  },\r\n  status: \"verified\",\r\n  accessGroups: [\r\n    {\r\n      slug: \"webflow-support\",\r\n      type: \"admin\"\r\n    }\r\n  ]\r\n}\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n//         for (let group of this.membership.config.accessGroups) {\r\n// //            let hasAccess: boolean = await this.checkAccessGroupAsync(group);\r\n//             if(hasAccess)\r\n//                 this.accessGroups.push(group);\r\n//         }\r\n\r\n      //  accessGroups.webflow = false;\r\n      //  accessGroups[\"webflow-2\"] = false;\r\n      //  accessGroups.push({\"client\": false});\r\n      //  accessGroups = {...accessGroups, [\"client\"]: false}; \r\n      \r\n    //   this.accessGroups.forEach((element, index) => {\r\n    //     this.accessGroups[index].access = true;\r\n    //     });\r\n        \r\n        /*\r\n      const accessGroups = {\r\n          \"webflow\": false,\r\n          \"webflow-2\": false,\r\n          \"client\": false\r\n        };\r\n      */\r\n        \r\n      //  const ag = accessGroups.map(\r\n      //x => Object.assign({}, accessGroups, {\"hasAccess\": \"true\"})\r\n      //  ); \r\n        \r\n//        return this.accessGroups; // \r\n    }\r\n\r\n}\r\n\r\n"],
  "mappings": ";;AA6BO,MAAM,mBAAN,MAAuB;AAAA,IAK1B,YAAY,YAA6B;AAFzC,0BAAyB,CAAC;AAGtB,WAAK,aAAa;AAAA,IACtB;AAAA,IAEA,MAAM,YAAY;AAEtB,cAAQ,IAAI,WAAW;AAGf,cAAQ,IAAI,MAAM,KAAK,oBAAoB,CAAC;AAAA,IAMhD;AAAA,IAEA,MAAM,sBAAsB;AASxB,YAAM,WAAW,MAAM;AAAA,QACrB,GAAG,KAAK,WAAW,OAAO,GAAG;AAAA,MAC7B;AAGJ,cAAQ,IAAI,WAAW,SAAS,MAAM;AAEtC,YAAM,MAAM,MAAM,SAAS,KAAK;AAEhC,cAAQ,IAAI,GAAG;AAAA,IAkEjB;AAAA,EAEJ;",
  "names": []
}
